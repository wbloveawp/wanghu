// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Demo.proto

#ifndef PROTOBUF_Demo_2eproto__INCLUDED
#define PROTOBUF_Demo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace pbdemo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Demo_2eproto();
void protobuf_AssignDesc_Demo_2eproto();
void protobuf_ShutdownFile_Demo_2eproto();

class RequestPacket;
class RespondePacket;

// ===================================================================

class RequestPacket : public ::google::protobuf::Message {
 public:
  RequestPacket();
  virtual ~RequestPacket();
  
  RequestPacket(const RequestPacket& from);
  
  inline RequestPacket& operator=(const RequestPacket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestPacket& default_instance();
  
  void Swap(RequestPacket* other);
  
  // implements Message ----------------------------------------------
  
  RequestPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestPacket& from);
  void MergeFrom(const RequestPacket& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 val_int32 = 1;
  inline bool has_val_int32() const;
  inline void clear_val_int32();
  static const int kValInt32FieldNumber = 1;
  inline ::google::protobuf::int32 val_int32() const;
  inline void set_val_int32(::google::protobuf::int32 value);
  
  // optional sint64 val_sint64 = 2;
  inline bool has_val_sint64() const;
  inline void clear_val_sint64();
  static const int kValSint64FieldNumber = 2;
  inline ::google::protobuf::int64 val_sint64() const;
  inline void set_val_sint64(::google::protobuf::int64 value);
  
  // optional double val_double = 3;
  inline bool has_val_double() const;
  inline void clear_val_double();
  static const int kValDoubleFieldNumber = 3;
  inline double val_double() const;
  inline void set_val_double(double value);
  
  // optional float val_float = 4;
  inline bool has_val_float() const;
  inline void clear_val_float();
  static const int kValFloatFieldNumber = 4;
  inline float val_float() const;
  inline void set_val_float(float value);
  
  // optional bytes val_bytes = 5;
  inline bool has_val_bytes() const;
  inline void clear_val_bytes();
  static const int kValBytesFieldNumber = 5;
  inline const ::std::string& val_bytes() const;
  inline void set_val_bytes(const ::std::string& value);
  inline void set_val_bytes(const char* value);
  inline void set_val_bytes(const void* value, size_t size);
  inline ::std::string* mutable_val_bytes();
  inline ::std::string* release_val_bytes();
  
  // @@protoc_insertion_point(class_scope:pbdemo.RequestPacket)
 private:
  inline void set_has_val_int32();
  inline void clear_has_val_int32();
  inline void set_has_val_sint64();
  inline void clear_has_val_sint64();
  inline void set_has_val_double();
  inline void clear_has_val_double();
  inline void set_has_val_float();
  inline void clear_has_val_float();
  inline void set_has_val_bytes();
  inline void clear_has_val_bytes();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 val_sint64_;
  ::google::protobuf::int32 val_int32_;
  float val_float_;
  double val_double_;
  ::std::string* val_bytes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Demo_2eproto();
  friend void protobuf_AssignDesc_Demo_2eproto();
  friend void protobuf_ShutdownFile_Demo_2eproto();
  
  void InitAsDefaultInstance();
  static RequestPacket* default_instance_;
};
// -------------------------------------------------------------------

class RespondePacket : public ::google::protobuf::Message {
 public:
  RespondePacket();
  virtual ~RespondePacket();
  
  RespondePacket(const RespondePacket& from);
  
  inline RespondePacket& operator=(const RespondePacket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RespondePacket& default_instance();
  
  void Swap(RespondePacket* other);
  
  // implements Message ----------------------------------------------
  
  RespondePacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RespondePacket& from);
  void MergeFrom(const RespondePacket& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 val_int32 = 1;
  inline bool has_val_int32() const;
  inline void clear_val_int32();
  static const int kValInt32FieldNumber = 1;
  inline ::google::protobuf::int32 val_int32() const;
  inline void set_val_int32(::google::protobuf::int32 value);
  
  // optional sint64 val_sint64 = 2;
  inline bool has_val_sint64() const;
  inline void clear_val_sint64();
  static const int kValSint64FieldNumber = 2;
  inline ::google::protobuf::int64 val_sint64() const;
  inline void set_val_sint64(::google::protobuf::int64 value);
  
  // optional double val_double = 3;
  inline bool has_val_double() const;
  inline void clear_val_double();
  static const int kValDoubleFieldNumber = 3;
  inline double val_double() const;
  inline void set_val_double(double value);
  
  // optional float val_float = 4;
  inline bool has_val_float() const;
  inline void clear_val_float();
  static const int kValFloatFieldNumber = 4;
  inline float val_float() const;
  inline void set_val_float(float value);
  
  // optional bytes val_bytes = 5;
  inline bool has_val_bytes() const;
  inline void clear_val_bytes();
  static const int kValBytesFieldNumber = 5;
  inline const ::std::string& val_bytes() const;
  inline void set_val_bytes(const ::std::string& value);
  inline void set_val_bytes(const char* value);
  inline void set_val_bytes(const void* value, size_t size);
  inline ::std::string* mutable_val_bytes();
  inline ::std::string* release_val_bytes();
  
  // @@protoc_insertion_point(class_scope:pbdemo.RespondePacket)
 private:
  inline void set_has_val_int32();
  inline void clear_has_val_int32();
  inline void set_has_val_sint64();
  inline void clear_has_val_sint64();
  inline void set_has_val_double();
  inline void clear_has_val_double();
  inline void set_has_val_float();
  inline void clear_has_val_float();
  inline void set_has_val_bytes();
  inline void clear_has_val_bytes();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 val_sint64_;
  ::google::protobuf::int32 val_int32_;
  float val_float_;
  double val_double_;
  ::std::string* val_bytes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Demo_2eproto();
  friend void protobuf_AssignDesc_Demo_2eproto();
  friend void protobuf_ShutdownFile_Demo_2eproto();
  
  void InitAsDefaultInstance();
  static RespondePacket* default_instance_;
};
// ===================================================================


// ===================================================================

// RequestPacket

// required int32 val_int32 = 1;
inline bool RequestPacket::has_val_int32() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestPacket::set_has_val_int32() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestPacket::clear_has_val_int32() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestPacket::clear_val_int32() {
  val_int32_ = 0;
  clear_has_val_int32();
}
inline ::google::protobuf::int32 RequestPacket::val_int32() const {
  return val_int32_;
}
inline void RequestPacket::set_val_int32(::google::protobuf::int32 value) {
  set_has_val_int32();
  val_int32_ = value;
}

// optional sint64 val_sint64 = 2;
inline bool RequestPacket::has_val_sint64() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestPacket::set_has_val_sint64() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestPacket::clear_has_val_sint64() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestPacket::clear_val_sint64() {
  val_sint64_ = GOOGLE_LONGLONG(0);
  clear_has_val_sint64();
}
inline ::google::protobuf::int64 RequestPacket::val_sint64() const {
  return val_sint64_;
}
inline void RequestPacket::set_val_sint64(::google::protobuf::int64 value) {
  set_has_val_sint64();
  val_sint64_ = value;
}

// optional double val_double = 3;
inline bool RequestPacket::has_val_double() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestPacket::set_has_val_double() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestPacket::clear_has_val_double() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestPacket::clear_val_double() {
  val_double_ = 0;
  clear_has_val_double();
}
inline double RequestPacket::val_double() const {
  return val_double_;
}
inline void RequestPacket::set_val_double(double value) {
  set_has_val_double();
  val_double_ = value;
}

// optional float val_float = 4;
inline bool RequestPacket::has_val_float() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestPacket::set_has_val_float() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestPacket::clear_has_val_float() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestPacket::clear_val_float() {
  val_float_ = 0;
  clear_has_val_float();
}
inline float RequestPacket::val_float() const {
  return val_float_;
}
inline void RequestPacket::set_val_float(float value) {
  set_has_val_float();
  val_float_ = value;
}

// optional bytes val_bytes = 5;
inline bool RequestPacket::has_val_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestPacket::set_has_val_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestPacket::clear_has_val_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestPacket::clear_val_bytes() {
  if (val_bytes_ != &::google::protobuf::internal::kEmptyString) {
    val_bytes_->clear();
  }
  clear_has_val_bytes();
}
inline const ::std::string& RequestPacket::val_bytes() const {
  return *val_bytes_;
}
inline void RequestPacket::set_val_bytes(const ::std::string& value) {
  set_has_val_bytes();
  if (val_bytes_ == &::google::protobuf::internal::kEmptyString) {
    val_bytes_ = new ::std::string;
  }
  val_bytes_->assign(value);
}
inline void RequestPacket::set_val_bytes(const char* value) {
  set_has_val_bytes();
  if (val_bytes_ == &::google::protobuf::internal::kEmptyString) {
    val_bytes_ = new ::std::string;
  }
  val_bytes_->assign(value);
}
inline void RequestPacket::set_val_bytes(const void* value, size_t size) {
  set_has_val_bytes();
  if (val_bytes_ == &::google::protobuf::internal::kEmptyString) {
    val_bytes_ = new ::std::string;
  }
  val_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestPacket::mutable_val_bytes() {
  set_has_val_bytes();
  if (val_bytes_ == &::google::protobuf::internal::kEmptyString) {
    val_bytes_ = new ::std::string;
  }
  return val_bytes_;
}
inline ::std::string* RequestPacket::release_val_bytes() {
  clear_has_val_bytes();
  if (val_bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_bytes_;
    val_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RespondePacket

// required int32 val_int32 = 1;
inline bool RespondePacket::has_val_int32() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RespondePacket::set_has_val_int32() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RespondePacket::clear_has_val_int32() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RespondePacket::clear_val_int32() {
  val_int32_ = 0;
  clear_has_val_int32();
}
inline ::google::protobuf::int32 RespondePacket::val_int32() const {
  return val_int32_;
}
inline void RespondePacket::set_val_int32(::google::protobuf::int32 value) {
  set_has_val_int32();
  val_int32_ = value;
}

// optional sint64 val_sint64 = 2;
inline bool RespondePacket::has_val_sint64() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RespondePacket::set_has_val_sint64() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RespondePacket::clear_has_val_sint64() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RespondePacket::clear_val_sint64() {
  val_sint64_ = GOOGLE_LONGLONG(0);
  clear_has_val_sint64();
}
inline ::google::protobuf::int64 RespondePacket::val_sint64() const {
  return val_sint64_;
}
inline void RespondePacket::set_val_sint64(::google::protobuf::int64 value) {
  set_has_val_sint64();
  val_sint64_ = value;
}

// optional double val_double = 3;
inline bool RespondePacket::has_val_double() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RespondePacket::set_has_val_double() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RespondePacket::clear_has_val_double() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RespondePacket::clear_val_double() {
  val_double_ = 0;
  clear_has_val_double();
}
inline double RespondePacket::val_double() const {
  return val_double_;
}
inline void RespondePacket::set_val_double(double value) {
  set_has_val_double();
  val_double_ = value;
}

// optional float val_float = 4;
inline bool RespondePacket::has_val_float() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RespondePacket::set_has_val_float() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RespondePacket::clear_has_val_float() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RespondePacket::clear_val_float() {
  val_float_ = 0;
  clear_has_val_float();
}
inline float RespondePacket::val_float() const {
  return val_float_;
}
inline void RespondePacket::set_val_float(float value) {
  set_has_val_float();
  val_float_ = value;
}

// optional bytes val_bytes = 5;
inline bool RespondePacket::has_val_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RespondePacket::set_has_val_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RespondePacket::clear_has_val_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RespondePacket::clear_val_bytes() {
  if (val_bytes_ != &::google::protobuf::internal::kEmptyString) {
    val_bytes_->clear();
  }
  clear_has_val_bytes();
}
inline const ::std::string& RespondePacket::val_bytes() const {
  return *val_bytes_;
}
inline void RespondePacket::set_val_bytes(const ::std::string& value) {
  set_has_val_bytes();
  if (val_bytes_ == &::google::protobuf::internal::kEmptyString) {
    val_bytes_ = new ::std::string;
  }
  val_bytes_->assign(value);
}
inline void RespondePacket::set_val_bytes(const char* value) {
  set_has_val_bytes();
  if (val_bytes_ == &::google::protobuf::internal::kEmptyString) {
    val_bytes_ = new ::std::string;
  }
  val_bytes_->assign(value);
}
inline void RespondePacket::set_val_bytes(const void* value, size_t size) {
  set_has_val_bytes();
  if (val_bytes_ == &::google::protobuf::internal::kEmptyString) {
    val_bytes_ = new ::std::string;
  }
  val_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RespondePacket::mutable_val_bytes() {
  set_has_val_bytes();
  if (val_bytes_ == &::google::protobuf::internal::kEmptyString) {
    val_bytes_ = new ::std::string;
  }
  return val_bytes_;
}
inline ::std::string* RespondePacket::release_val_bytes() {
  clear_has_val_bytes();
  if (val_bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_bytes_;
    val_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbdemo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Demo_2eproto__INCLUDED
