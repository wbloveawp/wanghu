#ifndef PACKET_HEAD_FILE
#define PACKET_HEAD_FILE

#pragma pack(1)

//////////////////////////////////////////////////////////////////////////
//端口定义

#define MAX_CONTENT					2046								//并发容量
#define PORT_AUTO_SELECT			INVALID_WORD						//自动端口
#define PORT_AUTO_MIN				10000								//最小端口
#define PORT_AUTO_MAX				30000								//最大端口


#define PORT_LOGON					6000								//登陆端口
#define PORT_CENTER					6010								//中心端口
#define PORT_MANAGER				6030								//管理端口
#define PORT_VALIDATE				6020								//验证端口

//////////////////////////////////////////////////////////////////////////
//网络定义

//网络掩码
#define DATA_MASK_CRYPTED			0x01								//数据加密
#define DATA_MASK_TAKETOKEN			0x10								//携带令牌

//网络令牌
#define TOKEN_COUNT					200									//网络令牌
#define TOKEN_BUFFER				(TOKEN_COUNT*sizeof(DWORD))			//令牌缓冲	

//缓冲定义
#define SOCKET_BUFFER				16384								//网络缓冲
#define SOCKET_PACKET				(SOCKET_BUFFER-TOKEN_BUFFER-sizeof(CMD_Head)-3*sizeof(DWORD)-39)

//网络内核
struct CMD_Info
{
	BYTE							cbDataMask;							//数据掩码
	BYTE							cbCheckCode;						//效验字段
	WORD							wPacketSize;						//数据大小
};

//网络命令
struct CMD_Command
{
	WORD							wMainCmdID;							//主命令码
	WORD							wSubCmdID;							//子命令码
};

//网络包头
struct CMD_Head
{
	CMD_Info						CmdInfo;							//基础结构
	CMD_Command						CommandInfo;						//命令信息
};

//网络包缓冲
struct CMD_Buffer
{
	CMD_Head						Head;								//数据包头
	BYTE							cbBuffer[SOCKET_PACKET];			//数据缓冲
};

//////////////////////////////////////////////////////////////////////////

//内核命令
#define MDM_KN_COMMAND				0									//内核命令
#define SUB_KN_DETECT_SOCKET		1									//检测命令
#define SUB_KN_SHUT_DOWN_SOCKET		2									//中断连接
#define SUB_KN_REPORT_ADDRESS		3									//上报地址

//////////////////////////////////////////////////////////////////////////
//传输数据

#define IPC_VER						1									//版本标识
#define IPC_PACKET					(SOCKET_BUFFER-sizeof(IPC_Head))	//最大包长
#define IPC_BUFFER					(sizeof(IPC_Head)+IPC_PACKET)		//缓冲长度

//数据包头
struct IPC_Head
{
	WORD							wVersion;							//版本标识
	WORD							wPacketSize;						//数据大小
	WORD							wMainCmdID;							//主命令码
	WORD							wSubCmdID;							//子命令码
};

//IPC 包结构
struct IPC_Buffer
{
	IPC_Head						Head;								//数据包头
	BYTE							cbBuffer[IPC_PACKET];				//数据缓冲
};

//////////////////////////////////////////////////////////////////////////
//数据定义

//加密密钥
const DWORD g_dwPacketKey[] = {0x06D96B00,0x01B4A8CE,0x1AAC4F80,0x00000000,0x00061D43};

//发送映射
const BYTE g_SendByteMap[256] =
{
	0x7C,0xBF,0xB9,0xB6,0xA1,0x5B,0xBC,0x55,0x2A,0x6A,0x24,0xE0,0x50,0x2B,0xF8,0x7B,
	0xE2,0x95,0xFC,0xE6,0x7F,0x9B,0x74,0xFF,0x20,0xAE,0x06,0x93,0x3F,0xA3,0xCB,0xC6,
	0x22,0x69,0x18,0x76,0x29,0xBA,0xA0,0xC1,0x98,0xE8,0x97,0x7A,0xF1,0xF9,0x3C,0xD6,
	0xD7,0x5D,0x01,0xF3,0x8D,0x41,0x71,0x5A,0xEA,0xA6,0x42,0xA9,0x47,0x89,0x1A,0x26,
	0x66,0xC8,0xE9,0xD4,0x14,0xAD,0x9E,0x6D,0x9C,0x39,0x94,0x43,0xF7,0xA7,0x27,0x48,
	0xB7,0xE3,0xEF,0x56,0x0B,0xDC,0x2F,0xDF,0x33,0x5E,0x6C,0xDA,0x37,0xDB,0xD1,0x65,
	0x85,0x61,0x46,0x84,0x4E,0x32,0xB8,0x6E,0x10,0xA8,0x87,0x05,0x8C,0x4A,0x38,0x6B,
	0x44,0xBE,0xEE,0x21,0xFE,0xB2,0x4B,0xC0,0x11,0x0E,0xAA,0x4C,0x90,0x83,0x91,0x8F,
	0xFB,0x3D,0x30,0xC4,0x77,0x17,0x99,0x1E,0xAB,0xCC,0x1C,0xB3,0xE7,0x54,0x75,0xD0,
	0xC3,0x31,0xFD,0x00,0x59,0xC2,0x3B,0xB1,0xED,0x86,0x70,0xEB,0xCD,0x7E,0x2C,0x15,
	0x0F,0xE4,0x5C,0xC7,0x2E,0xF4,0x58,0x53,0x02,0x57,0xF5,0xC9,0xD5,0xA2,0xAF,0xB4,
	0x49,0x60,0x5F,0x81,0x72,0x73,0x88,0x0A,0xE1,0x96,0xB0,0x63,0x1D,0x3E,0xF2,0xFA,
	0x08,0x78,0x82,0x64,0x1B,0xC5,0x4D,0xF0,0x36,0xB5,0x40,0x9A,0xD3,0xF6,0x0D,0x68,
	0x45,0x8E,0xA4,0x03,0xCE,0x25,0x92,0x23,0x13,0x2D,0x07,0x7D,0x19,0xBB,0xAC,0x09,
	0x9D,0xA5,0xD2,0xD8,0x80,0x67,0xDE,0x16,0xCF,0x3A,0xD9,0xEC,0x0C,0x1F,0xCA,0x4F,
	0x34,0xE5,0x8A,0xDD,0x28,0x8B,0x04,0x79,0x9F,0x6F,0x51,0x62,0xBD,0x12,0x35,0x52
};

//接收映射
const BYTE g_RecvByteMap[256] =
{
	0x93,0x32,0xA8,0xD3,0xF6,0x6B,0x1A,0xDA,0xC0,0xDF,0xB7,0x54,0xEC,0xCE,0x79,0xA0,
	0x68,0x78,0xFD,0xD8,0x44,0x9F,0xE7,0x85,0x22,0xDC,0x3E,0xC4,0x8A,0xBC,0x87,0xED,
	0x18,0x73,0x20,0xD7,0x0A,0xD5,0x3F,0x4E,0xF4,0x24,0x08,0x0D,0x9E,0xD9,0xA4,0x56,
	0x82,0x91,0x65,0x58,0xF0,0xFE,0xC8,0x5C,0x6E,0x49,0xE9,0x96,0x2E,0x81,0xBD,0x1C,
	0xCA,0x35,0x3A,0x4B,0x70,0xD0,0x62,0x3C,0x4F,0xB0,0x6D,0x76,0x7B,0xC6,0x64,0xEF,
	0x0C,0xFA,0xFF,0xA7,0x8D,0x07,0x53,0xA9,0xA6,0x94,0x37,0x05,0xA2,0x31,0x59,0xB2,
	0xB1,0x61,0xFB,0xBB,0xC3,0x5F,0x40,0xE5,0xCF,0x21,0x09,0x6F,0x5A,0x47,0x67,0xF9,
	0x9A,0x36,0xB4,0xB5,0x16,0x8E,0x23,0x84,0xC1,0xF7,0x2B,0x0F,0x00,0xDB,0x9D,0x14,
	0xE4,0xB3,0xC2,0x7D,0x63,0x60,0x99,0x6A,0xB6,0x3D,0xF2,0xF5,0x6C,0x34,0xD1,0x7F,
	0x7C,0x7E,0xD6,0x1B,0x4A,0x11,0xB9,0x2A,0x28,0x86,0xCB,0x15,0x48,0xE0,0x46,0xF8,
	0x26,0x04,0xAD,0x1D,0xD2,0xE1,0x39,0x4D,0x69,0x3B,0x7A,0x88,0xDE,0x45,0x19,0xAE,
	0xBA,0x97,0x75,0x8B,0xAF,0xC9,0x03,0x50,0x66,0x02,0x25,0xDD,0x06,0xFC,0x71,0x01,
	0x77,0x27,0x95,0x90,0x83,0xC5,0x1F,0xA3,0x41,0xAB,0xEE,0x1E,0x89,0x9C,0xD4,0xE8,
	0x8F,0x5E,0xE2,0xCC,0x43,0xAC,0x2F,0x30,0xE3,0xEA,0x5B,0x5D,0x55,0xF3,0xE6,0x57,
	0x0B,0xB8,0x10,0x51,0xA1,0xF1,0x13,0x8C,0x29,0x42,0x38,0x9B,0xEB,0x98,0x72,0x52,
	0xC7,0x2C,0xBE,0x33,0xA5,0xAA,0xCD,0x4C,0x0E,0x2D,0xBF,0x80,0x12,0x92,0x74,0x17
};


//////////////////////////////////////////////////////////////////////////

#pragma pack()

#endif