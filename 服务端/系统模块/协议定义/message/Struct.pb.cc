// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Struct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lhchat {

namespace {

const ::google::protobuf::Descriptor* InfoVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfoVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserPublicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserPublicInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendExtrasInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendExtrasInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserInfoIndex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ApplyMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ApplyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SearchType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Applystate_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ApplyResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UserRelation_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageKind_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgQueueKind_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChannelKind_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OperateResultCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Struct_2eproto() {
  protobuf_AddDesc_Struct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Struct.proto");
  GOOGLE_CHECK(file != NULL);
  InfoVersion_descriptor_ = file->message_type(0);
  static const int InfoVersion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoVersion, infoversion_),
  };
  InfoVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InfoVersion_descriptor_,
      InfoVersion::default_instance_,
      InfoVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InfoVersion));
  UserPublicInfo_descriptor_ = file->message_type(1);
  static const int UserPublicInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPublicInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPublicInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPublicInfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPublicInfo, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPublicInfo, customid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPublicInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPublicInfo, underwrite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPublicInfo, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPublicInfo, memberpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPublicInfo, rankscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPublicInfo, masterorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPublicInfo, loveliness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPublicInfo, infopublic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPublicInfo, infoversion_),
  };
  UserPublicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserPublicInfo_descriptor_,
      UserPublicInfo::default_instance_,
      UserPublicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPublicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPublicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserPublicInfo));
  FriendExtrasInfo_descriptor_ = file->message_type(2);
  static const int FriendExtrasInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendExtrasInfo, friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendExtrasInfo, remarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendExtrasInfo, applymode_),
  };
  FriendExtrasInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendExtrasInfo_descriptor_,
      FriendExtrasInfo::default_instance_,
      FriendExtrasInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendExtrasInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendExtrasInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendExtrasInfo));
  MessageItem_descriptor_ = file->message_type(3);
  static const int MessageItem_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageItem, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageItem, fromid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageItem, fromgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageItem, infoversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageItem, toid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageItem, msgkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageItem, showtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageItem, contenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageItem, contentdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageItem, generatedtime_),
  };
  MessageItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageItem_descriptor_,
      MessageItem::default_instance_,
      MessageItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageItem));
  UserInfoIndex_descriptor_ = file->enum_type(0);
  ApplyMode_descriptor_ = file->enum_type(1);
  ApplyType_descriptor_ = file->enum_type(2);
  SearchType_descriptor_ = file->enum_type(3);
  Applystate_descriptor_ = file->enum_type(4);
  ApplyResult_descriptor_ = file->enum_type(5);
  UserRelation_descriptor_ = file->enum_type(6);
  MessageKind_descriptor_ = file->enum_type(7);
  MsgQueueKind_descriptor_ = file->enum_type(8);
  ChannelKind_descriptor_ = file->enum_type(9);
  OperateResultCode_descriptor_ = file->enum_type(10);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Struct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InfoVersion_descriptor_, &InfoVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserPublicInfo_descriptor_, &UserPublicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendExtrasInfo_descriptor_, &FriendExtrasInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageItem_descriptor_, &MessageItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Struct_2eproto() {
  delete InfoVersion::default_instance_;
  delete InfoVersion_reflection_;
  delete UserPublicInfo::default_instance_;
  delete UserPublicInfo_reflection_;
  delete FriendExtrasInfo::default_instance_;
  delete FriendExtrasInfo_reflection_;
  delete MessageItem::default_instance_;
  delete MessageItem_reflection_;
}

void protobuf_AddDesc_Struct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Struct.proto\022\006lhchat\"\"\n\013InfoVersion\022\023\n"
    "\013infoVersion\030\001 \003(\005\"\223\002\n\016UserPublicInfo\022\013\n"
    "\003uid\030\001 \002(\005\022\016\n\006gameId\030\002 \001(\005\022\016\n\006gender\030\003 \001"
    "(\005\022\016\n\006faceId\030\004 \001(\005\022\020\n\010customId\030\005 \001(\005\022\020\n\010"
    "nickname\030\006 \001(\014\022\022\n\nunderwrite\030\007 \001(\014\022\022\n\nex"
    "perience\030\010 \001(\005\022\023\n\013memberPoint\030\t \001(\005\022\021\n\tr"
    "ankScore\030\n \001(\003\022\023\n\013masterOrder\030\013 \001(\005\022\022\n\nl"
    "oveliness\030\014 \001(\005\022\022\n\ninfoPublic\030b \002(\005\022\023\n\013i"
    "nfoVersion\030c \002(\014\"[\n\020FriendExtrasInfo\022\020\n\010"
    "friendid\030\001 \002(\005\022\017\n\007remarks\030\002 \001(\014\022$\n\tapply"
    "Mode\030\003 \001(\0162\021.lhchat.ApplyMode\"\331\001\n\013Messag"
    "eItem\022\r\n\005msgId\030\001 \002(\004\022\016\n\006fromId\030\002 \002(\005\022\017\n\007"
    "fromgid\030\t \001(\005\022\023\n\013infoVersion\030\n \001(\014\022\014\n\004to"
    "Id\030\003 \002(\005\022$\n\007msgKind\030\004 \001(\0162\023.lhchat.Messa"
    "geKind\022\020\n\010showType\030\005 \002(\005\022\023\n\013contentType\030"
    "\006 \002(\005\022\023\n\013contentData\030\007 \002(\014\022\025\n\rgeneratedT"
    "ime\030\010 \002(\004*\312\001\n\rUserInfoIndex\022\016\n\nUII_GAMEI"
    "D\020\000\022\016\n\nUII_GENDER\020\001\022\020\n\014UII_NICKNAME\020\002\022\021\n"
    "\rUII_RANKSCORE\020\003\022\022\n\016UII_EXPERIENCE\020\004\022\023\n\017"
    "UII_MEMBERPOINT\020\005\022\022\n\016UII_UNDERWRITE\020\006\022\023\n"
    "\017UII_MASTERORDER\020\007\022\016\n\nUII_FACEID\020\010\022\022\n\016UI"
    "I_LOVELINESS\020\t*N\n\tApplyMode\022\013\n\007AM_NONE\020\000"
    "\022\r\n\tAM_SEARCH\020\001\022\022\n\016AM_SCAN_QRCODE\020\002\022\021\n\rA"
    "M_VISIT_CARD\020\003*5\n\tApplyType\022\013\n\007AT_NONE\020\000"
    "\022\r\n\tAT_PERSON\020\001\022\014\n\010AT_GROUP\020\002**\n\nSearchT"
    "ype\022\r\n\tST_BY_UID\020\001\022\r\n\tST_BY_GID\020\002*F\n\nApp"
    "lystate\022\013\n\007AT_WAIT\020\000\022\014\n\010AT_AGREE\020\001\022\r\n\tAT"
    "_REFUSE\020\002\022\016\n\nAT_EXPIRED\020\003*7\n\013ApplyResult"
    "\022\013\n\007AR_NONE\020\000\022\014\n\010AR_AGREE\020\001\022\r\n\tAR_REFUSE"
    "\020\002*M\n\014UserRelation\022\013\n\007UR_NONE\020\000\022\017\n\013UR_ST"
    "RANGER\020\001\022\r\n\tUR_FRIEND\020\002\022\020\n\014UR_BLACKLIST\020"
    "\003*F\n\013MessageKind\022\013\n\007MK_NONE\020\000\022\014\n\010MK_WORL"
    "D\020\001\022\014\n\010MK_GROUP\020\002\022\016\n\nMK_PRIVATE\020\003*;\n\014Msg"
    "QueueKind\022\014\n\010MQK_NONE\020\000\022\r\n\tMQK_WORLD\020\001\022\016"
    "\n\nMQK_PERSON\020\002*7\n\013ChannelKind\022\013\n\007CK_NONE"
    "\020\000\022\r\n\tCK_SYSTEM\020\001\022\014\n\010CK_TABLE\020\002*\211\001\n\021Oper"
    "ateResultCode\022\014\n\010ORC_NONE\020\000\022\017\n\013ORC_SUCCE"
    "SS\020\001\022\017\n\013ORC_FAILURE\020\002\022\025\n\021ORC_INFO_NOTEXI"
    "ST\020\003\022\024\n\020ORC_DB_EXCEPTION\020\004\022\027\n\023ORC_TRY_AG"
    "AIN_LATER\020c", 1571);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Struct.proto", &protobuf_RegisterTypes);
  InfoVersion::default_instance_ = new InfoVersion();
  UserPublicInfo::default_instance_ = new UserPublicInfo();
  FriendExtrasInfo::default_instance_ = new FriendExtrasInfo();
  MessageItem::default_instance_ = new MessageItem();
  InfoVersion::default_instance_->InitAsDefaultInstance();
  UserPublicInfo::default_instance_->InitAsDefaultInstance();
  FriendExtrasInfo::default_instance_->InitAsDefaultInstance();
  MessageItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Struct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Struct_2eproto {
  StaticDescriptorInitializer_Struct_2eproto() {
    protobuf_AddDesc_Struct_2eproto();
  }
} static_descriptor_initializer_Struct_2eproto_;

const ::google::protobuf::EnumDescriptor* UserInfoIndex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoIndex_descriptor_;
}
bool UserInfoIndex_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ApplyMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyMode_descriptor_;
}
bool ApplyMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ApplyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyType_descriptor_;
}
bool ApplyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SearchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchType_descriptor_;
}
bool SearchType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Applystate_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Applystate_descriptor_;
}
bool Applystate_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ApplyResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyResult_descriptor_;
}
bool ApplyResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserRelation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRelation_descriptor_;
}
bool UserRelation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageKind_descriptor_;
}
bool MessageKind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MsgQueueKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueueKind_descriptor_;
}
bool MsgQueueKind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChannelKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelKind_descriptor_;
}
bool ChannelKind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OperateResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateResultCode_descriptor_;
}
bool OperateResultCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 99:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int InfoVersion::kInfoVersionFieldNumber;
#endif  // !_MSC_VER

InfoVersion::InfoVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InfoVersion::InitAsDefaultInstance() {
}

InfoVersion::InfoVersion(const InfoVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InfoVersion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfoVersion::~InfoVersion() {
  SharedDtor();
}

void InfoVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InfoVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfoVersion_descriptor_;
}

const InfoVersion& InfoVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2eproto();  return *default_instance_;
}

InfoVersion* InfoVersion::default_instance_ = NULL;

InfoVersion* InfoVersion::New() const {
  return new InfoVersion;
}

void InfoVersion::Clear() {
  infoversion_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InfoVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 infoVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_infoVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_infoversion())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_infoversion())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_infoVersion;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InfoVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 infoVersion = 1;
  for (int i = 0; i < this->infoversion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->infoversion(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InfoVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 infoVersion = 1;
  for (int i = 0; i < this->infoversion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->infoversion(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InfoVersion::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 infoVersion = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->infoversion_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->infoversion(i));
    }
    total_size += 1 * this->infoversion_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InfoVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InfoVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InfoVersion::MergeFrom(const InfoVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  infoversion_.MergeFrom(from.infoversion_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InfoVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoVersion::CopyFrom(const InfoVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoVersion::IsInitialized() const {
  
  return true;
}

void InfoVersion::Swap(InfoVersion* other) {
  if (other != this) {
    infoversion_.Swap(&other->infoversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InfoVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfoVersion_descriptor_;
  metadata.reflection = InfoVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserPublicInfo::kUidFieldNumber;
const int UserPublicInfo::kGameIdFieldNumber;
const int UserPublicInfo::kGenderFieldNumber;
const int UserPublicInfo::kFaceIdFieldNumber;
const int UserPublicInfo::kCustomIdFieldNumber;
const int UserPublicInfo::kNicknameFieldNumber;
const int UserPublicInfo::kUnderwriteFieldNumber;
const int UserPublicInfo::kExperienceFieldNumber;
const int UserPublicInfo::kMemberPointFieldNumber;
const int UserPublicInfo::kRankScoreFieldNumber;
const int UserPublicInfo::kMasterOrderFieldNumber;
const int UserPublicInfo::kLovelinessFieldNumber;
const int UserPublicInfo::kInfoPublicFieldNumber;
const int UserPublicInfo::kInfoVersionFieldNumber;
#endif  // !_MSC_VER

UserPublicInfo::UserPublicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserPublicInfo::InitAsDefaultInstance() {
}

UserPublicInfo::UserPublicInfo(const UserPublicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserPublicInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  gameid_ = 0;
  gender_ = 0;
  faceid_ = 0;
  customid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underwrite_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  experience_ = 0;
  memberpoint_ = 0;
  rankscore_ = GOOGLE_LONGLONG(0);
  masterorder_ = 0;
  loveliness_ = 0;
  infopublic_ = 0;
  infoversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserPublicInfo::~UserPublicInfo() {
  SharedDtor();
}

void UserPublicInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (underwrite_ != &::google::protobuf::internal::kEmptyString) {
    delete underwrite_;
  }
  if (infoversion_ != &::google::protobuf::internal::kEmptyString) {
    delete infoversion_;
  }
  if (this != default_instance_) {
  }
}

void UserPublicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPublicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPublicInfo_descriptor_;
}

const UserPublicInfo& UserPublicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2eproto();  return *default_instance_;
}

UserPublicInfo* UserPublicInfo::default_instance_ = NULL;

UserPublicInfo* UserPublicInfo::New() const {
  return new UserPublicInfo;
}

void UserPublicInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    gameid_ = 0;
    gender_ = 0;
    faceid_ = 0;
    customid_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_underwrite()) {
      if (underwrite_ != &::google::protobuf::internal::kEmptyString) {
        underwrite_->clear();
      }
    }
    experience_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    memberpoint_ = 0;
    rankscore_ = GOOGLE_LONGLONG(0);
    masterorder_ = 0;
    loveliness_ = 0;
    infopublic_ = 0;
    if (has_infoversion()) {
      if (infoversion_ != &::google::protobuf::internal::kEmptyString) {
        infoversion_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserPublicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameId;
        break;
      }
      
      // optional int32 gameId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gender;
        break;
      }
      
      // optional int32 gender = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_faceId;
        break;
      }
      
      // optional int32 faceId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faceid_)));
          set_has_faceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_customId;
        break;
      }
      
      // optional int32 customId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_customId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &customid_)));
          set_has_customid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nickname;
        break;
      }
      
      // optional bytes nickname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_underwrite;
        break;
      }
      
      // optional bytes underwrite = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underwrite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_underwrite()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_experience;
        break;
      }
      
      // optional int32 experience = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_memberPoint;
        break;
      }
      
      // optional int32 memberPoint = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memberpoint_)));
          set_has_memberpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_rankScore;
        break;
      }
      
      // optional int64 rankScore = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rankscore_)));
          set_has_rankscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_masterOrder;
        break;
      }
      
      // optional int32 masterOrder = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_masterOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &masterorder_)));
          set_has_masterorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_loveliness;
        break;
      }
      
      // optional int32 loveliness = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loveliness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loveliness_)));
          set_has_loveliness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(784)) goto parse_infoPublic;
        break;
      }
      
      // required int32 infoPublic = 98;
      case 98: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_infoPublic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infopublic_)));
          set_has_infopublic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(794)) goto parse_infoVersion;
        break;
      }
      
      // required bytes infoVersion = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infoVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_infoversion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserPublicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }
  
  // optional int32 gameId = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }
  
  // optional int32 gender = 3;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gender(), output);
  }
  
  // optional int32 faceId = 4;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->faceid(), output);
  }
  
  // optional int32 customId = 5;
  if (has_customid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->customid(), output);
  }
  
  // optional bytes nickname = 6;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->nickname(), output);
  }
  
  // optional bytes underwrite = 7;
  if (has_underwrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->underwrite(), output);
  }
  
  // optional int32 experience = 8;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->experience(), output);
  }
  
  // optional int32 memberPoint = 9;
  if (has_memberpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->memberpoint(), output);
  }
  
  // optional int64 rankScore = 10;
  if (has_rankscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->rankscore(), output);
  }
  
  // optional int32 masterOrder = 11;
  if (has_masterorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->masterorder(), output);
  }
  
  // optional int32 loveliness = 12;
  if (has_loveliness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->loveliness(), output);
  }
  
  // required int32 infoPublic = 98;
  if (has_infopublic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(98, this->infopublic(), output);
  }
  
  // required bytes infoVersion = 99;
  if (has_infoversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      99, this->infoversion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserPublicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }
  
  // optional int32 gameId = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }
  
  // optional int32 gender = 3;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gender(), target);
  }
  
  // optional int32 faceId = 4;
  if (has_faceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->faceid(), target);
  }
  
  // optional int32 customId = 5;
  if (has_customid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->customid(), target);
  }
  
  // optional bytes nickname = 6;
  if (has_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->nickname(), target);
  }
  
  // optional bytes underwrite = 7;
  if (has_underwrite()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->underwrite(), target);
  }
  
  // optional int32 experience = 8;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->experience(), target);
  }
  
  // optional int32 memberPoint = 9;
  if (has_memberpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->memberpoint(), target);
  }
  
  // optional int64 rankScore = 10;
  if (has_rankscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->rankscore(), target);
  }
  
  // optional int32 masterOrder = 11;
  if (has_masterorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->masterorder(), target);
  }
  
  // optional int32 loveliness = 12;
  if (has_loveliness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->loveliness(), target);
  }
  
  // required int32 infoPublic = 98;
  if (has_infopublic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(98, this->infopublic(), target);
  }
  
  // required bytes infoVersion = 99;
  if (has_infoversion()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        99, this->infoversion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserPublicInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }
    
    // optional int32 gameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }
    
    // optional int32 gender = 3;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }
    
    // optional int32 faceId = 4;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->faceid());
    }
    
    // optional int32 customId = 5;
    if (has_customid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->customid());
    }
    
    // optional bytes nickname = 6;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }
    
    // optional bytes underwrite = 7;
    if (has_underwrite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->underwrite());
    }
    
    // optional int32 experience = 8;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->experience());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 memberPoint = 9;
    if (has_memberpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memberpoint());
    }
    
    // optional int64 rankScore = 10;
    if (has_rankscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rankscore());
    }
    
    // optional int32 masterOrder = 11;
    if (has_masterorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->masterorder());
    }
    
    // optional int32 loveliness = 12;
    if (has_loveliness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loveliness());
    }
    
    // required int32 infoPublic = 98;
    if (has_infopublic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->infopublic());
    }
    
    // required bytes infoVersion = 99;
    if (has_infoversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->infoversion());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPublicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserPublicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserPublicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserPublicInfo::MergeFrom(const UserPublicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
    if (from.has_customid()) {
      set_customid(from.customid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_underwrite()) {
      set_underwrite(from.underwrite());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_memberpoint()) {
      set_memberpoint(from.memberpoint());
    }
    if (from.has_rankscore()) {
      set_rankscore(from.rankscore());
    }
    if (from.has_masterorder()) {
      set_masterorder(from.masterorder());
    }
    if (from.has_loveliness()) {
      set_loveliness(from.loveliness());
    }
    if (from.has_infopublic()) {
      set_infopublic(from.infopublic());
    }
    if (from.has_infoversion()) {
      set_infoversion(from.infoversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserPublicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPublicInfo::CopyFrom(const UserPublicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPublicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003001) != 0x00003001) return false;
  
  return true;
}

void UserPublicInfo::Swap(UserPublicInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(gameid_, other->gameid_);
    std::swap(gender_, other->gender_);
    std::swap(faceid_, other->faceid_);
    std::swap(customid_, other->customid_);
    std::swap(nickname_, other->nickname_);
    std::swap(underwrite_, other->underwrite_);
    std::swap(experience_, other->experience_);
    std::swap(memberpoint_, other->memberpoint_);
    std::swap(rankscore_, other->rankscore_);
    std::swap(masterorder_, other->masterorder_);
    std::swap(loveliness_, other->loveliness_);
    std::swap(infopublic_, other->infopublic_);
    std::swap(infoversion_, other->infoversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserPublicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserPublicInfo_descriptor_;
  metadata.reflection = UserPublicInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendExtrasInfo::kFriendidFieldNumber;
const int FriendExtrasInfo::kRemarksFieldNumber;
const int FriendExtrasInfo::kApplyModeFieldNumber;
#endif  // !_MSC_VER

FriendExtrasInfo::FriendExtrasInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendExtrasInfo::InitAsDefaultInstance() {
}

FriendExtrasInfo::FriendExtrasInfo(const FriendExtrasInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendExtrasInfo::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = 0;
  remarks_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  applymode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendExtrasInfo::~FriendExtrasInfo() {
  SharedDtor();
}

void FriendExtrasInfo::SharedDtor() {
  if (remarks_ != &::google::protobuf::internal::kEmptyString) {
    delete remarks_;
  }
  if (this != default_instance_) {
  }
}

void FriendExtrasInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendExtrasInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendExtrasInfo_descriptor_;
}

const FriendExtrasInfo& FriendExtrasInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2eproto();  return *default_instance_;
}

FriendExtrasInfo* FriendExtrasInfo::default_instance_ = NULL;

FriendExtrasInfo* FriendExtrasInfo::New() const {
  return new FriendExtrasInfo;
}

void FriendExtrasInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendid_ = 0;
    if (has_remarks()) {
      if (remarks_ != &::google::protobuf::internal::kEmptyString) {
        remarks_->clear();
      }
    }
    applymode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendExtrasInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 friendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_remarks;
        break;
      }
      
      // optional bytes remarks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remarks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_remarks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_applyMode;
        break;
      }
      
      // optional .lhchat.ApplyMode applyMode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applyMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lhchat::ApplyMode_IsValid(value)) {
            set_applymode(static_cast< lhchat::ApplyMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendExtrasInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 friendid = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friendid(), output);
  }
  
  // optional bytes remarks = 2;
  if (has_remarks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->remarks(), output);
  }
  
  // optional .lhchat.ApplyMode applyMode = 3;
  if (has_applymode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->applymode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendExtrasInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 friendid = 1;
  if (has_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->friendid(), target);
  }
  
  // optional bytes remarks = 2;
  if (has_remarks()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->remarks(), target);
  }
  
  // optional .lhchat.ApplyMode applyMode = 3;
  if (has_applymode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->applymode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendExtrasInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 friendid = 1;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendid());
    }
    
    // optional bytes remarks = 2;
    if (has_remarks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->remarks());
    }
    
    // optional .lhchat.ApplyMode applyMode = 3;
    if (has_applymode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->applymode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendExtrasInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendExtrasInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendExtrasInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendExtrasInfo::MergeFrom(const FriendExtrasInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
    if (from.has_remarks()) {
      set_remarks(from.remarks());
    }
    if (from.has_applymode()) {
      set_applymode(from.applymode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendExtrasInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendExtrasInfo::CopyFrom(const FriendExtrasInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendExtrasInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FriendExtrasInfo::Swap(FriendExtrasInfo* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(remarks_, other->remarks_);
    std::swap(applymode_, other->applymode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendExtrasInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendExtrasInfo_descriptor_;
  metadata.reflection = FriendExtrasInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageItem::kMsgIdFieldNumber;
const int MessageItem::kFromIdFieldNumber;
const int MessageItem::kFromgidFieldNumber;
const int MessageItem::kInfoVersionFieldNumber;
const int MessageItem::kToIdFieldNumber;
const int MessageItem::kMsgKindFieldNumber;
const int MessageItem::kShowTypeFieldNumber;
const int MessageItem::kContentTypeFieldNumber;
const int MessageItem::kContentDataFieldNumber;
const int MessageItem::kGeneratedTimeFieldNumber;
#endif  // !_MSC_VER

MessageItem::MessageItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageItem::InitAsDefaultInstance() {
}

MessageItem::MessageItem(const MessageItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageItem::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = GOOGLE_ULONGLONG(0);
  fromid_ = 0;
  fromgid_ = 0;
  infoversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  toid_ = 0;
  msgkind_ = 0;
  showtype_ = 0;
  contenttype_ = 0;
  contentdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  generatedtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageItem::~MessageItem() {
  SharedDtor();
}

void MessageItem::SharedDtor() {
  if (infoversion_ != &::google::protobuf::internal::kEmptyString) {
    delete infoversion_;
  }
  if (contentdata_ != &::google::protobuf::internal::kEmptyString) {
    delete contentdata_;
  }
  if (this != default_instance_) {
  }
}

void MessageItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageItem_descriptor_;
}

const MessageItem& MessageItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2eproto();  return *default_instance_;
}

MessageItem* MessageItem::default_instance_ = NULL;

MessageItem* MessageItem::New() const {
  return new MessageItem;
}

void MessageItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = GOOGLE_ULONGLONG(0);
    fromid_ = 0;
    fromgid_ = 0;
    if (has_infoversion()) {
      if (infoversion_ != &::google::protobuf::internal::kEmptyString) {
        infoversion_->clear();
      }
    }
    toid_ = 0;
    msgkind_ = 0;
    showtype_ = 0;
    contenttype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_contentdata()) {
      if (contentdata_ != &::google::protobuf::internal::kEmptyString) {
        contentdata_->clear();
      }
    }
    generatedtime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 msgId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fromId;
        break;
      }
      
      // required int32 fromId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromid_)));
          set_has_fromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_toId;
        break;
      }
      
      // required int32 toId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toid_)));
          set_has_toid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_msgKind;
        break;
      }
      
      // optional .lhchat.MessageKind msgKind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgKind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lhchat::MessageKind_IsValid(value)) {
            set_msgkind(static_cast< lhchat::MessageKind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_showType;
        break;
      }
      
      // required int32 showType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showtype_)));
          set_has_showtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_contentType;
        break;
      }
      
      // required int32 contentType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contentType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contenttype_)));
          set_has_contenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_contentData;
        break;
      }
      
      // required bytes contentData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contentData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contentdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_generatedTime;
        break;
      }
      
      // required uint64 generatedTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_generatedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &generatedtime_)));
          set_has_generatedtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fromgid;
        break;
      }
      
      // optional int32 fromgid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromgid_)));
          set_has_fromgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_infoVersion;
        break;
      }
      
      // optional bytes infoVersion = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infoVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_infoversion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 msgId = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->msgid(), output);
  }
  
  // required int32 fromId = 2;
  if (has_fromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fromid(), output);
  }
  
  // required int32 toId = 3;
  if (has_toid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->toid(), output);
  }
  
  // optional .lhchat.MessageKind msgKind = 4;
  if (has_msgkind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->msgkind(), output);
  }
  
  // required int32 showType = 5;
  if (has_showtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->showtype(), output);
  }
  
  // required int32 contentType = 6;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->contenttype(), output);
  }
  
  // required bytes contentData = 7;
  if (has_contentdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->contentdata(), output);
  }
  
  // required uint64 generatedTime = 8;
  if (has_generatedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->generatedtime(), output);
  }
  
  // optional int32 fromgid = 9;
  if (has_fromgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fromgid(), output);
  }
  
  // optional bytes infoVersion = 10;
  if (has_infoversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->infoversion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 msgId = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->msgid(), target);
  }
  
  // required int32 fromId = 2;
  if (has_fromid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fromid(), target);
  }
  
  // required int32 toId = 3;
  if (has_toid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->toid(), target);
  }
  
  // optional .lhchat.MessageKind msgKind = 4;
  if (has_msgkind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->msgkind(), target);
  }
  
  // required int32 showType = 5;
  if (has_showtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->showtype(), target);
  }
  
  // required int32 contentType = 6;
  if (has_contenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->contenttype(), target);
  }
  
  // required bytes contentData = 7;
  if (has_contentdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->contentdata(), target);
  }
  
  // required uint64 generatedTime = 8;
  if (has_generatedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->generatedtime(), target);
  }
  
  // optional int32 fromgid = 9;
  if (has_fromgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fromgid(), target);
  }
  
  // optional bytes infoVersion = 10;
  if (has_infoversion()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->infoversion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 msgId = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgid());
    }
    
    // required int32 fromId = 2;
    if (has_fromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromid());
    }
    
    // optional int32 fromgid = 9;
    if (has_fromgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromgid());
    }
    
    // optional bytes infoVersion = 10;
    if (has_infoversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->infoversion());
    }
    
    // required int32 toId = 3;
    if (has_toid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toid());
    }
    
    // optional .lhchat.MessageKind msgKind = 4;
    if (has_msgkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgkind());
    }
    
    // required int32 showType = 5;
    if (has_showtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showtype());
    }
    
    // required int32 contentType = 6;
    if (has_contenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contenttype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bytes contentData = 7;
    if (has_contentdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contentdata());
    }
    
    // required uint64 generatedTime = 8;
    if (has_generatedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->generatedtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageItem::MergeFrom(const MessageItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_fromid()) {
      set_fromid(from.fromid());
    }
    if (from.has_fromgid()) {
      set_fromgid(from.fromgid());
    }
    if (from.has_infoversion()) {
      set_infoversion(from.infoversion());
    }
    if (from.has_toid()) {
      set_toid(from.toid());
    }
    if (from.has_msgkind()) {
      set_msgkind(from.msgkind());
    }
    if (from.has_showtype()) {
      set_showtype(from.showtype());
    }
    if (from.has_contenttype()) {
      set_contenttype(from.contenttype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_contentdata()) {
      set_contentdata(from.contentdata());
    }
    if (from.has_generatedtime()) {
      set_generatedtime(from.generatedtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageItem::CopyFrom(const MessageItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003d3) != 0x000003d3) return false;
  
  return true;
}

void MessageItem::Swap(MessageItem* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(fromid_, other->fromid_);
    std::swap(fromgid_, other->fromgid_);
    std::swap(infoversion_, other->infoversion_);
    std::swap(toid_, other->toid_);
    std::swap(msgkind_, other->msgkind_);
    std::swap(showtype_, other->showtype_);
    std::swap(contenttype_, other->contenttype_);
    std::swap(contentdata_, other->contentdata_);
    std::swap(generatedtime_, other->generatedtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageItem_descriptor_;
  metadata.reflection = MessageItem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lhchat

// @@protoc_insertion_point(global_scope)
