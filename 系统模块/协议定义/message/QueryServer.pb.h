// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QueryServer.proto

#ifndef PROTOBUF_QueryServer_2eproto__INCLUDED
#define PROTOBUF_QueryServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)

namespace lhchat {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_QueryServer_2eproto();
void protobuf_AssignDesc_QueryServer_2eproto();
void protobuf_ShutdownFile_QueryServer_2eproto();

class SyncUserInfoRequest;
class QueryUserInfoRequest;
class QueryBlackListRequest;
class QueryFriendListRequest;
class QueryFriendInfoRequest;
class QueryFriendExtrasRequest;
class BuildAccessTokenRequest;
class UserInfoList;
class FriendInfoList;
class FriendExtrasList;
class SyncUserInfoResult;
class QueryUserInfoResult;
class QueryBlackListResult;
class QueryFriendListResult;
class QueryFriendInfoResult;
class QueryFriendExtrasResult;
class BuildAccessTokenResult;

// ===================================================================

class SyncUserInfoRequest : public ::google::protobuf::Message {
 public:
  SyncUserInfoRequest();
  virtual ~SyncUserInfoRequest();
  
  SyncUserInfoRequest(const SyncUserInfoRequest& from);
  
  inline SyncUserInfoRequest& operator=(const SyncUserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncUserInfoRequest& default_instance();
  
  void Swap(SyncUserInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  SyncUserInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncUserInfoRequest& from);
  void MergeFrom(const SyncUserInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 uid = 1;
  inline int uid_size() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid(int index) const;
  inline void set_uid(int index, ::google::protobuf::int32 value);
  inline void add_uid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      uid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_uid();
  
  // repeated bytes infoVersion = 2;
  inline int infoversion_size() const;
  inline void clear_infoversion();
  static const int kInfoVersionFieldNumber = 2;
  inline const ::std::string& infoversion(int index) const;
  inline ::std::string* mutable_infoversion(int index);
  inline void set_infoversion(int index, const ::std::string& value);
  inline void set_infoversion(int index, const char* value);
  inline void set_infoversion(int index, const void* value, size_t size);
  inline ::std::string* add_infoversion();
  inline void add_infoversion(const ::std::string& value);
  inline void add_infoversion(const char* value);
  inline void add_infoversion(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& infoversion() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_infoversion();
  
  // @@protoc_insertion_point(class_scope:lhchat.SyncUserInfoRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > uid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> infoversion_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_QueryServer_2eproto();
  friend void protobuf_AssignDesc_QueryServer_2eproto();
  friend void protobuf_ShutdownFile_QueryServer_2eproto();
  
  void InitAsDefaultInstance();
  static SyncUserInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryUserInfoRequest : public ::google::protobuf::Message {
 public:
  QueryUserInfoRequest();
  virtual ~QueryUserInfoRequest();
  
  QueryUserInfoRequest(const QueryUserInfoRequest& from);
  
  inline QueryUserInfoRequest& operator=(const QueryUserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUserInfoRequest& default_instance();
  
  void Swap(QueryUserInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  QueryUserInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryUserInfoRequest& from);
  void MergeFrom(const QueryUserInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 ObjectId = 1;
  inline int objectid_size() const;
  inline void clear_objectid();
  static const int kObjectIdFieldNumber = 1;
  inline ::google::protobuf::int32 objectid(int index) const;
  inline void set_objectid(int index, ::google::protobuf::int32 value);
  inline void add_objectid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      objectid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_objectid();
  
  // optional .lhchat.SearchType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline lhchat::SearchType type() const;
  inline void set_type(lhchat::SearchType value);
  
  // @@protoc_insertion_point(class_scope:lhchat.QueryUserInfoRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > objectid_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_QueryServer_2eproto();
  friend void protobuf_AssignDesc_QueryServer_2eproto();
  friend void protobuf_ShutdownFile_QueryServer_2eproto();
  
  void InitAsDefaultInstance();
  static QueryUserInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryBlackListRequest : public ::google::protobuf::Message {
 public:
  QueryBlackListRequest();
  virtual ~QueryBlackListRequest();
  
  QueryBlackListRequest(const QueryBlackListRequest& from);
  
  inline QueryBlackListRequest& operator=(const QueryBlackListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryBlackListRequest& default_instance();
  
  void Swap(QueryBlackListRequest* other);
  
  // implements Message ----------------------------------------------
  
  QueryBlackListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryBlackListRequest& from);
  void MergeFrom(const QueryBlackListRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 pageSize = 1;
  inline bool has_pagesize() const;
  inline void clear_pagesize();
  static const int kPageSizeFieldNumber = 1;
  inline ::google::protobuf::int32 pagesize() const;
  inline void set_pagesize(::google::protobuf::int32 value);
  
  // required int32 pageIndex = 2;
  inline bool has_pageindex() const;
  inline void clear_pageindex();
  static const int kPageIndexFieldNumber = 2;
  inline ::google::protobuf::int32 pageindex() const;
  inline void set_pageindex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:lhchat.QueryBlackListRequest)
 private:
  inline void set_has_pagesize();
  inline void clear_has_pagesize();
  inline void set_has_pageindex();
  inline void clear_has_pageindex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 pagesize_;
  ::google::protobuf::int32 pageindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_QueryServer_2eproto();
  friend void protobuf_AssignDesc_QueryServer_2eproto();
  friend void protobuf_ShutdownFile_QueryServer_2eproto();
  
  void InitAsDefaultInstance();
  static QueryBlackListRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryFriendListRequest : public ::google::protobuf::Message {
 public:
  QueryFriendListRequest();
  virtual ~QueryFriendListRequest();
  
  QueryFriendListRequest(const QueryFriendListRequest& from);
  
  inline QueryFriendListRequest& operator=(const QueryFriendListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryFriendListRequest& default_instance();
  
  void Swap(QueryFriendListRequest* other);
  
  // implements Message ----------------------------------------------
  
  QueryFriendListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryFriendListRequest& from);
  void MergeFrom(const QueryFriendListRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 pageSize = 1;
  inline bool has_pagesize() const;
  inline void clear_pagesize();
  static const int kPageSizeFieldNumber = 1;
  inline ::google::protobuf::int32 pagesize() const;
  inline void set_pagesize(::google::protobuf::int32 value);
  
  // required int32 pageIndex = 2;
  inline bool has_pageindex() const;
  inline void clear_pageindex();
  static const int kPageIndexFieldNumber = 2;
  inline ::google::protobuf::int32 pageindex() const;
  inline void set_pageindex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:lhchat.QueryFriendListRequest)
 private:
  inline void set_has_pagesize();
  inline void clear_has_pagesize();
  inline void set_has_pageindex();
  inline void clear_has_pageindex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 pagesize_;
  ::google::protobuf::int32 pageindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_QueryServer_2eproto();
  friend void protobuf_AssignDesc_QueryServer_2eproto();
  friend void protobuf_ShutdownFile_QueryServer_2eproto();
  
  void InitAsDefaultInstance();
  static QueryFriendListRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryFriendInfoRequest : public ::google::protobuf::Message {
 public:
  QueryFriendInfoRequest();
  virtual ~QueryFriendInfoRequest();
  
  QueryFriendInfoRequest(const QueryFriendInfoRequest& from);
  
  inline QueryFriendInfoRequest& operator=(const QueryFriendInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryFriendInfoRequest& default_instance();
  
  void Swap(QueryFriendInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  QueryFriendInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryFriendInfoRequest& from);
  void MergeFrom(const QueryFriendInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 friendId = 1;
  inline int friendid_size() const;
  inline void clear_friendid();
  static const int kFriendIdFieldNumber = 1;
  inline ::google::protobuf::int32 friendid(int index) const;
  inline void set_friendid(int index, ::google::protobuf::int32 value);
  inline void add_friendid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      friendid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_friendid();
  
  // @@protoc_insertion_point(class_scope:lhchat.QueryFriendInfoRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > friendid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_QueryServer_2eproto();
  friend void protobuf_AssignDesc_QueryServer_2eproto();
  friend void protobuf_ShutdownFile_QueryServer_2eproto();
  
  void InitAsDefaultInstance();
  static QueryFriendInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryFriendExtrasRequest : public ::google::protobuf::Message {
 public:
  QueryFriendExtrasRequest();
  virtual ~QueryFriendExtrasRequest();
  
  QueryFriendExtrasRequest(const QueryFriendExtrasRequest& from);
  
  inline QueryFriendExtrasRequest& operator=(const QueryFriendExtrasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryFriendExtrasRequest& default_instance();
  
  void Swap(QueryFriendExtrasRequest* other);
  
  // implements Message ----------------------------------------------
  
  QueryFriendExtrasRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryFriendExtrasRequest& from);
  void MergeFrom(const QueryFriendExtrasRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 friendId = 1;
  inline int friendid_size() const;
  inline void clear_friendid();
  static const int kFriendIdFieldNumber = 1;
  inline ::google::protobuf::int32 friendid(int index) const;
  inline void set_friendid(int index, ::google::protobuf::int32 value);
  inline void add_friendid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      friendid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_friendid();
  
  // @@protoc_insertion_point(class_scope:lhchat.QueryFriendExtrasRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > friendid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_QueryServer_2eproto();
  friend void protobuf_AssignDesc_QueryServer_2eproto();
  friend void protobuf_ShutdownFile_QueryServer_2eproto();
  
  void InitAsDefaultInstance();
  static QueryFriendExtrasRequest* default_instance_;
};
// -------------------------------------------------------------------

class BuildAccessTokenRequest : public ::google::protobuf::Message {
 public:
  BuildAccessTokenRequest();
  virtual ~BuildAccessTokenRequest();
  
  BuildAccessTokenRequest(const BuildAccessTokenRequest& from);
  
  inline BuildAccessTokenRequest& operator=(const BuildAccessTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildAccessTokenRequest& default_instance();
  
  void Swap(BuildAccessTokenRequest* other);
  
  // implements Message ----------------------------------------------
  
  BuildAccessTokenRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuildAccessTokenRequest& from);
  void MergeFrom(const BuildAccessTokenRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes channelName = 1;
  inline bool has_channelname() const;
  inline void clear_channelname();
  static const int kChannelNameFieldNumber = 1;
  inline const ::std::string& channelname() const;
  inline void set_channelname(const ::std::string& value);
  inline void set_channelname(const char* value);
  inline void set_channelname(const void* value, size_t size);
  inline ::std::string* mutable_channelname();
  inline ::std::string* release_channelname();
  
  // required .lhchat.ChannelKind channelKind = 2;
  inline bool has_channelkind() const;
  inline void clear_channelkind();
  static const int kChannelKindFieldNumber = 2;
  inline lhchat::ChannelKind channelkind() const;
  inline void set_channelkind(lhchat::ChannelKind value);
  
  // optional int32 masterOrder = 3;
  inline bool has_masterorder() const;
  inline void clear_masterorder();
  static const int kMasterOrderFieldNumber = 3;
  inline ::google::protobuf::int32 masterorder() const;
  inline void set_masterorder(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:lhchat.BuildAccessTokenRequest)
 private:
  inline void set_has_channelname();
  inline void clear_has_channelname();
  inline void set_has_channelkind();
  inline void clear_has_channelkind();
  inline void set_has_masterorder();
  inline void clear_has_masterorder();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* channelname_;
  int channelkind_;
  ::google::protobuf::int32 masterorder_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_QueryServer_2eproto();
  friend void protobuf_AssignDesc_QueryServer_2eproto();
  friend void protobuf_ShutdownFile_QueryServer_2eproto();
  
  void InitAsDefaultInstance();
  static BuildAccessTokenRequest* default_instance_;
};
// -------------------------------------------------------------------

class UserInfoList : public ::google::protobuf::Message {
 public:
  UserInfoList();
  virtual ~UserInfoList();
  
  UserInfoList(const UserInfoList& from);
  
  inline UserInfoList& operator=(const UserInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfoList& default_instance();
  
  void Swap(UserInfoList* other);
  
  // implements Message ----------------------------------------------
  
  UserInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfoList& from);
  void MergeFrom(const UserInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated bytes userInfo = 1;
  inline int userinfo_size() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  inline const ::std::string& userinfo(int index) const;
  inline ::std::string* mutable_userinfo(int index);
  inline void set_userinfo(int index, const ::std::string& value);
  inline void set_userinfo(int index, const char* value);
  inline void set_userinfo(int index, const void* value, size_t size);
  inline ::std::string* add_userinfo();
  inline void add_userinfo(const ::std::string& value);
  inline void add_userinfo(const char* value);
  inline void add_userinfo(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& userinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_userinfo();
  
  // @@protoc_insertion_point(class_scope:lhchat.UserInfoList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> userinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_QueryServer_2eproto();
  friend void protobuf_AssignDesc_QueryServer_2eproto();
  friend void protobuf_ShutdownFile_QueryServer_2eproto();
  
  void InitAsDefaultInstance();
  static UserInfoList* default_instance_;
};
// -------------------------------------------------------------------

class FriendInfoList : public ::google::protobuf::Message {
 public:
  FriendInfoList();
  virtual ~FriendInfoList();
  
  FriendInfoList(const FriendInfoList& from);
  
  inline FriendInfoList& operator=(const FriendInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendInfoList& default_instance();
  
  void Swap(FriendInfoList* other);
  
  // implements Message ----------------------------------------------
  
  FriendInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendInfoList& from);
  void MergeFrom(const FriendInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated bytes userInfo = 1;
  inline int userinfo_size() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  inline const ::std::string& userinfo(int index) const;
  inline ::std::string* mutable_userinfo(int index);
  inline void set_userinfo(int index, const ::std::string& value);
  inline void set_userinfo(int index, const char* value);
  inline void set_userinfo(int index, const void* value, size_t size);
  inline ::std::string* add_userinfo();
  inline void add_userinfo(const ::std::string& value);
  inline void add_userinfo(const char* value);
  inline void add_userinfo(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& userinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_userinfo();
  
  // repeated bytes ExtrasInfo = 2;
  inline int extrasinfo_size() const;
  inline void clear_extrasinfo();
  static const int kExtrasInfoFieldNumber = 2;
  inline const ::std::string& extrasinfo(int index) const;
  inline ::std::string* mutable_extrasinfo(int index);
  inline void set_extrasinfo(int index, const ::std::string& value);
  inline void set_extrasinfo(int index, const char* value);
  inline void set_extrasinfo(int index, const void* value, size_t size);
  inline ::std::string* add_extrasinfo();
  inline void add_extrasinfo(const ::std::string& value);
  inline void add_extrasinfo(const char* value);
  inline void add_extrasinfo(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& extrasinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_extrasinfo();
  
  // @@protoc_insertion_point(class_scope:lhchat.FriendInfoList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> userinfo_;
  ::google::protobuf::RepeatedPtrField< ::std::string> extrasinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_QueryServer_2eproto();
  friend void protobuf_AssignDesc_QueryServer_2eproto();
  friend void protobuf_ShutdownFile_QueryServer_2eproto();
  
  void InitAsDefaultInstance();
  static FriendInfoList* default_instance_;
};
// -------------------------------------------------------------------

class FriendExtrasList : public ::google::protobuf::Message {
 public:
  FriendExtrasList();
  virtual ~FriendExtrasList();
  
  FriendExtrasList(const FriendExtrasList& from);
  
  inline FriendExtrasList& operator=(const FriendExtrasList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendExtrasList& default_instance();
  
  void Swap(FriendExtrasList* other);
  
  // implements Message ----------------------------------------------
  
  FriendExtrasList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendExtrasList& from);
  void MergeFrom(const FriendExtrasList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated bytes ExtrasInfo = 1;
  inline int extrasinfo_size() const;
  inline void clear_extrasinfo();
  static const int kExtrasInfoFieldNumber = 1;
  inline const ::std::string& extrasinfo(int index) const;
  inline ::std::string* mutable_extrasinfo(int index);
  inline void set_extrasinfo(int index, const ::std::string& value);
  inline void set_extrasinfo(int index, const char* value);
  inline void set_extrasinfo(int index, const void* value, size_t size);
  inline ::std::string* add_extrasinfo();
  inline void add_extrasinfo(const ::std::string& value);
  inline void add_extrasinfo(const char* value);
  inline void add_extrasinfo(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& extrasinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_extrasinfo();
  
  // @@protoc_insertion_point(class_scope:lhchat.FriendExtrasList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> extrasinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_QueryServer_2eproto();
  friend void protobuf_AssignDesc_QueryServer_2eproto();
  friend void protobuf_ShutdownFile_QueryServer_2eproto();
  
  void InitAsDefaultInstance();
  static FriendExtrasList* default_instance_;
};
// -------------------------------------------------------------------

class SyncUserInfoResult : public ::google::protobuf::Message {
 public:
  SyncUserInfoResult();
  virtual ~SyncUserInfoResult();
  
  SyncUserInfoResult(const SyncUserInfoResult& from);
  
  inline SyncUserInfoResult& operator=(const SyncUserInfoResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncUserInfoResult& default_instance();
  
  void Swap(SyncUserInfoResult* other);
  
  // implements Message ----------------------------------------------
  
  SyncUserInfoResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncUserInfoResult& from);
  void MergeFrom(const SyncUserInfoResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // required .lhchat.OperateResultCode retCode = 2;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 2;
  inline lhchat::OperateResultCode retcode() const;
  inline void set_retcode(lhchat::OperateResultCode value);
  
  // @@protoc_insertion_point(class_scope:lhchat.SyncUserInfoResult)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* message_;
  int retcode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_QueryServer_2eproto();
  friend void protobuf_AssignDesc_QueryServer_2eproto();
  friend void protobuf_ShutdownFile_QueryServer_2eproto();
  
  void InitAsDefaultInstance();
  static SyncUserInfoResult* default_instance_;
};
// -------------------------------------------------------------------

class QueryUserInfoResult : public ::google::protobuf::Message {
 public:
  QueryUserInfoResult();
  virtual ~QueryUserInfoResult();
  
  QueryUserInfoResult(const QueryUserInfoResult& from);
  
  inline QueryUserInfoResult& operator=(const QueryUserInfoResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUserInfoResult& default_instance();
  
  void Swap(QueryUserInfoResult* other);
  
  // implements Message ----------------------------------------------
  
  QueryUserInfoResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryUserInfoResult& from);
  void MergeFrom(const QueryUserInfoResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // required .lhchat.OperateResultCode retCode = 2;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 2;
  inline lhchat::OperateResultCode retcode() const;
  inline void set_retcode(lhchat::OperateResultCode value);
  
  // @@protoc_insertion_point(class_scope:lhchat.QueryUserInfoResult)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* message_;
  int retcode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_QueryServer_2eproto();
  friend void protobuf_AssignDesc_QueryServer_2eproto();
  friend void protobuf_ShutdownFile_QueryServer_2eproto();
  
  void InitAsDefaultInstance();
  static QueryUserInfoResult* default_instance_;
};
// -------------------------------------------------------------------

class QueryBlackListResult : public ::google::protobuf::Message {
 public:
  QueryBlackListResult();
  virtual ~QueryBlackListResult();
  
  QueryBlackListResult(const QueryBlackListResult& from);
  
  inline QueryBlackListResult& operator=(const QueryBlackListResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryBlackListResult& default_instance();
  
  void Swap(QueryBlackListResult* other);
  
  // implements Message ----------------------------------------------
  
  QueryBlackListResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryBlackListResult& from);
  void MergeFrom(const QueryBlackListResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // required .lhchat.OperateResultCode retCode = 2;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 2;
  inline lhchat::OperateResultCode retcode() const;
  inline void set_retcode(lhchat::OperateResultCode value);
  
  // required int32 leftCount = 3;
  inline bool has_leftcount() const;
  inline void clear_leftcount();
  static const int kLeftCountFieldNumber = 3;
  inline ::google::protobuf::int32 leftcount() const;
  inline void set_leftcount(::google::protobuf::int32 value);
  
  // repeated int32 uid = 4;
  inline int uid_size() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline ::google::protobuf::int32 uid(int index) const;
  inline void set_uid(int index, ::google::protobuf::int32 value);
  inline void add_uid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      uid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_uid();
  
  // @@protoc_insertion_point(class_scope:lhchat.QueryBlackListResult)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_leftcount();
  inline void clear_has_leftcount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* message_;
  int retcode_;
  ::google::protobuf::int32 leftcount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > uid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_QueryServer_2eproto();
  friend void protobuf_AssignDesc_QueryServer_2eproto();
  friend void protobuf_ShutdownFile_QueryServer_2eproto();
  
  void InitAsDefaultInstance();
  static QueryBlackListResult* default_instance_;
};
// -------------------------------------------------------------------

class QueryFriendListResult : public ::google::protobuf::Message {
 public:
  QueryFriendListResult();
  virtual ~QueryFriendListResult();
  
  QueryFriendListResult(const QueryFriendListResult& from);
  
  inline QueryFriendListResult& operator=(const QueryFriendListResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryFriendListResult& default_instance();
  
  void Swap(QueryFriendListResult* other);
  
  // implements Message ----------------------------------------------
  
  QueryFriendListResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryFriendListResult& from);
  void MergeFrom(const QueryFriendListResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // required .lhchat.OperateResultCode retCode = 2;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 2;
  inline lhchat::OperateResultCode retcode() const;
  inline void set_retcode(lhchat::OperateResultCode value);
  
  // required int32 leftCount = 3;
  inline bool has_leftcount() const;
  inline void clear_leftcount();
  static const int kLeftCountFieldNumber = 3;
  inline ::google::protobuf::int32 leftcount() const;
  inline void set_leftcount(::google::protobuf::int32 value);
  
  // repeated int32 friendId = 4;
  inline int friendid_size() const;
  inline void clear_friendid();
  static const int kFriendIdFieldNumber = 4;
  inline ::google::protobuf::int32 friendid(int index) const;
  inline void set_friendid(int index, ::google::protobuf::int32 value);
  inline void add_friendid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      friendid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_friendid();
  
  // @@protoc_insertion_point(class_scope:lhchat.QueryFriendListResult)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_leftcount();
  inline void clear_has_leftcount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* message_;
  int retcode_;
  ::google::protobuf::int32 leftcount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > friendid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_QueryServer_2eproto();
  friend void protobuf_AssignDesc_QueryServer_2eproto();
  friend void protobuf_ShutdownFile_QueryServer_2eproto();
  
  void InitAsDefaultInstance();
  static QueryFriendListResult* default_instance_;
};
// -------------------------------------------------------------------

class QueryFriendInfoResult : public ::google::protobuf::Message {
 public:
  QueryFriendInfoResult();
  virtual ~QueryFriendInfoResult();
  
  QueryFriendInfoResult(const QueryFriendInfoResult& from);
  
  inline QueryFriendInfoResult& operator=(const QueryFriendInfoResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryFriendInfoResult& default_instance();
  
  void Swap(QueryFriendInfoResult* other);
  
  // implements Message ----------------------------------------------
  
  QueryFriendInfoResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryFriendInfoResult& from);
  void MergeFrom(const QueryFriendInfoResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // required .lhchat.OperateResultCode retCode = 2;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 2;
  inline lhchat::OperateResultCode retcode() const;
  inline void set_retcode(lhchat::OperateResultCode value);
  
  // @@protoc_insertion_point(class_scope:lhchat.QueryFriendInfoResult)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* message_;
  int retcode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_QueryServer_2eproto();
  friend void protobuf_AssignDesc_QueryServer_2eproto();
  friend void protobuf_ShutdownFile_QueryServer_2eproto();
  
  void InitAsDefaultInstance();
  static QueryFriendInfoResult* default_instance_;
};
// -------------------------------------------------------------------

class QueryFriendExtrasResult : public ::google::protobuf::Message {
 public:
  QueryFriendExtrasResult();
  virtual ~QueryFriendExtrasResult();
  
  QueryFriendExtrasResult(const QueryFriendExtrasResult& from);
  
  inline QueryFriendExtrasResult& operator=(const QueryFriendExtrasResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryFriendExtrasResult& default_instance();
  
  void Swap(QueryFriendExtrasResult* other);
  
  // implements Message ----------------------------------------------
  
  QueryFriendExtrasResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryFriendExtrasResult& from);
  void MergeFrom(const QueryFriendExtrasResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // required .lhchat.OperateResultCode retCode = 2;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 2;
  inline lhchat::OperateResultCode retcode() const;
  inline void set_retcode(lhchat::OperateResultCode value);
  
  // @@protoc_insertion_point(class_scope:lhchat.QueryFriendExtrasResult)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* message_;
  int retcode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_QueryServer_2eproto();
  friend void protobuf_AssignDesc_QueryServer_2eproto();
  friend void protobuf_ShutdownFile_QueryServer_2eproto();
  
  void InitAsDefaultInstance();
  static QueryFriendExtrasResult* default_instance_;
};
// -------------------------------------------------------------------

class BuildAccessTokenResult : public ::google::protobuf::Message {
 public:
  BuildAccessTokenResult();
  virtual ~BuildAccessTokenResult();
  
  BuildAccessTokenResult(const BuildAccessTokenResult& from);
  
  inline BuildAccessTokenResult& operator=(const BuildAccessTokenResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildAccessTokenResult& default_instance();
  
  void Swap(BuildAccessTokenResult* other);
  
  // implements Message ----------------------------------------------
  
  BuildAccessTokenResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuildAccessTokenResult& from);
  void MergeFrom(const BuildAccessTokenResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes channelName = 1;
  inline bool has_channelname() const;
  inline void clear_channelname();
  static const int kChannelNameFieldNumber = 1;
  inline const ::std::string& channelname() const;
  inline void set_channelname(const ::std::string& value);
  inline void set_channelname(const char* value);
  inline void set_channelname(const void* value, size_t size);
  inline ::std::string* mutable_channelname();
  inline ::std::string* release_channelname();
  
  // required .lhchat.ChannelKind channelKind = 2;
  inline bool has_channelkind() const;
  inline void clear_channelkind();
  static const int kChannelKindFieldNumber = 2;
  inline lhchat::ChannelKind channelkind() const;
  inline void set_channelkind(lhchat::ChannelKind value);
  
  // optional bytes AccessToken = 3;
  inline bool has_accesstoken() const;
  inline void clear_accesstoken();
  static const int kAccessTokenFieldNumber = 3;
  inline const ::std::string& accesstoken() const;
  inline void set_accesstoken(const ::std::string& value);
  inline void set_accesstoken(const char* value);
  inline void set_accesstoken(const void* value, size_t size);
  inline ::std::string* mutable_accesstoken();
  inline ::std::string* release_accesstoken();
  
  // @@protoc_insertion_point(class_scope:lhchat.BuildAccessTokenResult)
 private:
  inline void set_has_channelname();
  inline void clear_has_channelname();
  inline void set_has_channelkind();
  inline void clear_has_channelkind();
  inline void set_has_accesstoken();
  inline void clear_has_accesstoken();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* channelname_;
  ::std::string* accesstoken_;
  int channelkind_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_QueryServer_2eproto();
  friend void protobuf_AssignDesc_QueryServer_2eproto();
  friend void protobuf_ShutdownFile_QueryServer_2eproto();
  
  void InitAsDefaultInstance();
  static BuildAccessTokenResult* default_instance_;
};
// ===================================================================


// ===================================================================

// SyncUserInfoRequest

// repeated int32 uid = 1;
inline int SyncUserInfoRequest::uid_size() const {
  return uid_.size();
}
inline void SyncUserInfoRequest::clear_uid() {
  uid_.Clear();
}
inline ::google::protobuf::int32 SyncUserInfoRequest::uid(int index) const {
  return uid_.Get(index);
}
inline void SyncUserInfoRequest::set_uid(int index, ::google::protobuf::int32 value) {
  uid_.Set(index, value);
}
inline void SyncUserInfoRequest::add_uid(::google::protobuf::int32 value) {
  uid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SyncUserInfoRequest::uid() const {
  return uid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SyncUserInfoRequest::mutable_uid() {
  return &uid_;
}

// repeated bytes infoVersion = 2;
inline int SyncUserInfoRequest::infoversion_size() const {
  return infoversion_.size();
}
inline void SyncUserInfoRequest::clear_infoversion() {
  infoversion_.Clear();
}
inline const ::std::string& SyncUserInfoRequest::infoversion(int index) const {
  return infoversion_.Get(index);
}
inline ::std::string* SyncUserInfoRequest::mutable_infoversion(int index) {
  return infoversion_.Mutable(index);
}
inline void SyncUserInfoRequest::set_infoversion(int index, const ::std::string& value) {
  infoversion_.Mutable(index)->assign(value);
}
inline void SyncUserInfoRequest::set_infoversion(int index, const char* value) {
  infoversion_.Mutable(index)->assign(value);
}
inline void SyncUserInfoRequest::set_infoversion(int index, const void* value, size_t size) {
  infoversion_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncUserInfoRequest::add_infoversion() {
  return infoversion_.Add();
}
inline void SyncUserInfoRequest::add_infoversion(const ::std::string& value) {
  infoversion_.Add()->assign(value);
}
inline void SyncUserInfoRequest::add_infoversion(const char* value) {
  infoversion_.Add()->assign(value);
}
inline void SyncUserInfoRequest::add_infoversion(const void* value, size_t size) {
  infoversion_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SyncUserInfoRequest::infoversion() const {
  return infoversion_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SyncUserInfoRequest::mutable_infoversion() {
  return &infoversion_;
}

// -------------------------------------------------------------------

// QueryUserInfoRequest

// repeated int32 ObjectId = 1;
inline int QueryUserInfoRequest::objectid_size() const {
  return objectid_.size();
}
inline void QueryUserInfoRequest::clear_objectid() {
  objectid_.Clear();
}
inline ::google::protobuf::int32 QueryUserInfoRequest::objectid(int index) const {
  return objectid_.Get(index);
}
inline void QueryUserInfoRequest::set_objectid(int index, ::google::protobuf::int32 value) {
  objectid_.Set(index, value);
}
inline void QueryUserInfoRequest::add_objectid(::google::protobuf::int32 value) {
  objectid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryUserInfoRequest::objectid() const {
  return objectid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryUserInfoRequest::mutable_objectid() {
  return &objectid_;
}

// optional .lhchat.SearchType type = 2;
inline bool QueryUserInfoRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryUserInfoRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryUserInfoRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryUserInfoRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline lhchat::SearchType QueryUserInfoRequest::type() const {
  return static_cast< lhchat::SearchType >(type_);
}
inline void QueryUserInfoRequest::set_type(lhchat::SearchType value) {
  GOOGLE_DCHECK(lhchat::SearchType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// QueryBlackListRequest

// required int32 pageSize = 1;
inline bool QueryBlackListRequest::has_pagesize() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryBlackListRequest::set_has_pagesize() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryBlackListRequest::clear_has_pagesize() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryBlackListRequest::clear_pagesize() {
  pagesize_ = 0;
  clear_has_pagesize();
}
inline ::google::protobuf::int32 QueryBlackListRequest::pagesize() const {
  return pagesize_;
}
inline void QueryBlackListRequest::set_pagesize(::google::protobuf::int32 value) {
  set_has_pagesize();
  pagesize_ = value;
}

// required int32 pageIndex = 2;
inline bool QueryBlackListRequest::has_pageindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryBlackListRequest::set_has_pageindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryBlackListRequest::clear_has_pageindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryBlackListRequest::clear_pageindex() {
  pageindex_ = 0;
  clear_has_pageindex();
}
inline ::google::protobuf::int32 QueryBlackListRequest::pageindex() const {
  return pageindex_;
}
inline void QueryBlackListRequest::set_pageindex(::google::protobuf::int32 value) {
  set_has_pageindex();
  pageindex_ = value;
}

// -------------------------------------------------------------------

// QueryFriendListRequest

// required int32 pageSize = 1;
inline bool QueryFriendListRequest::has_pagesize() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryFriendListRequest::set_has_pagesize() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryFriendListRequest::clear_has_pagesize() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryFriendListRequest::clear_pagesize() {
  pagesize_ = 0;
  clear_has_pagesize();
}
inline ::google::protobuf::int32 QueryFriendListRequest::pagesize() const {
  return pagesize_;
}
inline void QueryFriendListRequest::set_pagesize(::google::protobuf::int32 value) {
  set_has_pagesize();
  pagesize_ = value;
}

// required int32 pageIndex = 2;
inline bool QueryFriendListRequest::has_pageindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryFriendListRequest::set_has_pageindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryFriendListRequest::clear_has_pageindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryFriendListRequest::clear_pageindex() {
  pageindex_ = 0;
  clear_has_pageindex();
}
inline ::google::protobuf::int32 QueryFriendListRequest::pageindex() const {
  return pageindex_;
}
inline void QueryFriendListRequest::set_pageindex(::google::protobuf::int32 value) {
  set_has_pageindex();
  pageindex_ = value;
}

// -------------------------------------------------------------------

// QueryFriendInfoRequest

// repeated int32 friendId = 1;
inline int QueryFriendInfoRequest::friendid_size() const {
  return friendid_.size();
}
inline void QueryFriendInfoRequest::clear_friendid() {
  friendid_.Clear();
}
inline ::google::protobuf::int32 QueryFriendInfoRequest::friendid(int index) const {
  return friendid_.Get(index);
}
inline void QueryFriendInfoRequest::set_friendid(int index, ::google::protobuf::int32 value) {
  friendid_.Set(index, value);
}
inline void QueryFriendInfoRequest::add_friendid(::google::protobuf::int32 value) {
  friendid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryFriendInfoRequest::friendid() const {
  return friendid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryFriendInfoRequest::mutable_friendid() {
  return &friendid_;
}

// -------------------------------------------------------------------

// QueryFriendExtrasRequest

// repeated int32 friendId = 1;
inline int QueryFriendExtrasRequest::friendid_size() const {
  return friendid_.size();
}
inline void QueryFriendExtrasRequest::clear_friendid() {
  friendid_.Clear();
}
inline ::google::protobuf::int32 QueryFriendExtrasRequest::friendid(int index) const {
  return friendid_.Get(index);
}
inline void QueryFriendExtrasRequest::set_friendid(int index, ::google::protobuf::int32 value) {
  friendid_.Set(index, value);
}
inline void QueryFriendExtrasRequest::add_friendid(::google::protobuf::int32 value) {
  friendid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryFriendExtrasRequest::friendid() const {
  return friendid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryFriendExtrasRequest::mutable_friendid() {
  return &friendid_;
}

// -------------------------------------------------------------------

// BuildAccessTokenRequest

// required bytes channelName = 1;
inline bool BuildAccessTokenRequest::has_channelname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuildAccessTokenRequest::set_has_channelname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuildAccessTokenRequest::clear_has_channelname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuildAccessTokenRequest::clear_channelname() {
  if (channelname_ != &::google::protobuf::internal::kEmptyString) {
    channelname_->clear();
  }
  clear_has_channelname();
}
inline const ::std::string& BuildAccessTokenRequest::channelname() const {
  return *channelname_;
}
inline void BuildAccessTokenRequest::set_channelname(const ::std::string& value) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(value);
}
inline void BuildAccessTokenRequest::set_channelname(const char* value) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(value);
}
inline void BuildAccessTokenRequest::set_channelname(const void* value, size_t size) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BuildAccessTokenRequest::mutable_channelname() {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  return channelname_;
}
inline ::std::string* BuildAccessTokenRequest::release_channelname() {
  clear_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelname_;
    channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .lhchat.ChannelKind channelKind = 2;
inline bool BuildAccessTokenRequest::has_channelkind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuildAccessTokenRequest::set_has_channelkind() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuildAccessTokenRequest::clear_has_channelkind() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuildAccessTokenRequest::clear_channelkind() {
  channelkind_ = 0;
  clear_has_channelkind();
}
inline lhchat::ChannelKind BuildAccessTokenRequest::channelkind() const {
  return static_cast< lhchat::ChannelKind >(channelkind_);
}
inline void BuildAccessTokenRequest::set_channelkind(lhchat::ChannelKind value) {
  GOOGLE_DCHECK(lhchat::ChannelKind_IsValid(value));
  set_has_channelkind();
  channelkind_ = value;
}

// optional int32 masterOrder = 3;
inline bool BuildAccessTokenRequest::has_masterorder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuildAccessTokenRequest::set_has_masterorder() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuildAccessTokenRequest::clear_has_masterorder() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuildAccessTokenRequest::clear_masterorder() {
  masterorder_ = 0;
  clear_has_masterorder();
}
inline ::google::protobuf::int32 BuildAccessTokenRequest::masterorder() const {
  return masterorder_;
}
inline void BuildAccessTokenRequest::set_masterorder(::google::protobuf::int32 value) {
  set_has_masterorder();
  masterorder_ = value;
}

// -------------------------------------------------------------------

// UserInfoList

// repeated bytes userInfo = 1;
inline int UserInfoList::userinfo_size() const {
  return userinfo_.size();
}
inline void UserInfoList::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::std::string& UserInfoList::userinfo(int index) const {
  return userinfo_.Get(index);
}
inline ::std::string* UserInfoList::mutable_userinfo(int index) {
  return userinfo_.Mutable(index);
}
inline void UserInfoList::set_userinfo(int index, const ::std::string& value) {
  userinfo_.Mutable(index)->assign(value);
}
inline void UserInfoList::set_userinfo(int index, const char* value) {
  userinfo_.Mutable(index)->assign(value);
}
inline void UserInfoList::set_userinfo(int index, const void* value, size_t size) {
  userinfo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfoList::add_userinfo() {
  return userinfo_.Add();
}
inline void UserInfoList::add_userinfo(const ::std::string& value) {
  userinfo_.Add()->assign(value);
}
inline void UserInfoList::add_userinfo(const char* value) {
  userinfo_.Add()->assign(value);
}
inline void UserInfoList::add_userinfo(const void* value, size_t size) {
  userinfo_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserInfoList::userinfo() const {
  return userinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserInfoList::mutable_userinfo() {
  return &userinfo_;
}

// -------------------------------------------------------------------

// FriendInfoList

// repeated bytes userInfo = 1;
inline int FriendInfoList::userinfo_size() const {
  return userinfo_.size();
}
inline void FriendInfoList::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::std::string& FriendInfoList::userinfo(int index) const {
  return userinfo_.Get(index);
}
inline ::std::string* FriendInfoList::mutable_userinfo(int index) {
  return userinfo_.Mutable(index);
}
inline void FriendInfoList::set_userinfo(int index, const ::std::string& value) {
  userinfo_.Mutable(index)->assign(value);
}
inline void FriendInfoList::set_userinfo(int index, const char* value) {
  userinfo_.Mutable(index)->assign(value);
}
inline void FriendInfoList::set_userinfo(int index, const void* value, size_t size) {
  userinfo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendInfoList::add_userinfo() {
  return userinfo_.Add();
}
inline void FriendInfoList::add_userinfo(const ::std::string& value) {
  userinfo_.Add()->assign(value);
}
inline void FriendInfoList::add_userinfo(const char* value) {
  userinfo_.Add()->assign(value);
}
inline void FriendInfoList::add_userinfo(const void* value, size_t size) {
  userinfo_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FriendInfoList::userinfo() const {
  return userinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FriendInfoList::mutable_userinfo() {
  return &userinfo_;
}

// repeated bytes ExtrasInfo = 2;
inline int FriendInfoList::extrasinfo_size() const {
  return extrasinfo_.size();
}
inline void FriendInfoList::clear_extrasinfo() {
  extrasinfo_.Clear();
}
inline const ::std::string& FriendInfoList::extrasinfo(int index) const {
  return extrasinfo_.Get(index);
}
inline ::std::string* FriendInfoList::mutable_extrasinfo(int index) {
  return extrasinfo_.Mutable(index);
}
inline void FriendInfoList::set_extrasinfo(int index, const ::std::string& value) {
  extrasinfo_.Mutable(index)->assign(value);
}
inline void FriendInfoList::set_extrasinfo(int index, const char* value) {
  extrasinfo_.Mutable(index)->assign(value);
}
inline void FriendInfoList::set_extrasinfo(int index, const void* value, size_t size) {
  extrasinfo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendInfoList::add_extrasinfo() {
  return extrasinfo_.Add();
}
inline void FriendInfoList::add_extrasinfo(const ::std::string& value) {
  extrasinfo_.Add()->assign(value);
}
inline void FriendInfoList::add_extrasinfo(const char* value) {
  extrasinfo_.Add()->assign(value);
}
inline void FriendInfoList::add_extrasinfo(const void* value, size_t size) {
  extrasinfo_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FriendInfoList::extrasinfo() const {
  return extrasinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FriendInfoList::mutable_extrasinfo() {
  return &extrasinfo_;
}

// -------------------------------------------------------------------

// FriendExtrasList

// repeated bytes ExtrasInfo = 1;
inline int FriendExtrasList::extrasinfo_size() const {
  return extrasinfo_.size();
}
inline void FriendExtrasList::clear_extrasinfo() {
  extrasinfo_.Clear();
}
inline const ::std::string& FriendExtrasList::extrasinfo(int index) const {
  return extrasinfo_.Get(index);
}
inline ::std::string* FriendExtrasList::mutable_extrasinfo(int index) {
  return extrasinfo_.Mutable(index);
}
inline void FriendExtrasList::set_extrasinfo(int index, const ::std::string& value) {
  extrasinfo_.Mutable(index)->assign(value);
}
inline void FriendExtrasList::set_extrasinfo(int index, const char* value) {
  extrasinfo_.Mutable(index)->assign(value);
}
inline void FriendExtrasList::set_extrasinfo(int index, const void* value, size_t size) {
  extrasinfo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendExtrasList::add_extrasinfo() {
  return extrasinfo_.Add();
}
inline void FriendExtrasList::add_extrasinfo(const ::std::string& value) {
  extrasinfo_.Add()->assign(value);
}
inline void FriendExtrasList::add_extrasinfo(const char* value) {
  extrasinfo_.Add()->assign(value);
}
inline void FriendExtrasList::add_extrasinfo(const void* value, size_t size) {
  extrasinfo_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FriendExtrasList::extrasinfo() const {
  return extrasinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FriendExtrasList::mutable_extrasinfo() {
  return &extrasinfo_;
}

// -------------------------------------------------------------------

// SyncUserInfoResult

// optional bytes message = 1;
inline bool SyncUserInfoResult::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncUserInfoResult::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncUserInfoResult::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncUserInfoResult::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& SyncUserInfoResult::message() const {
  return *message_;
}
inline void SyncUserInfoResult::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void SyncUserInfoResult::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void SyncUserInfoResult::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncUserInfoResult::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* SyncUserInfoResult::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .lhchat.OperateResultCode retCode = 2;
inline bool SyncUserInfoResult::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncUserInfoResult::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncUserInfoResult::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncUserInfoResult::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline lhchat::OperateResultCode SyncUserInfoResult::retcode() const {
  return static_cast< lhchat::OperateResultCode >(retcode_);
}
inline void SyncUserInfoResult::set_retcode(lhchat::OperateResultCode value) {
  GOOGLE_DCHECK(lhchat::OperateResultCode_IsValid(value));
  set_has_retcode();
  retcode_ = value;
}

// -------------------------------------------------------------------

// QueryUserInfoResult

// optional bytes message = 1;
inline bool QueryUserInfoResult::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryUserInfoResult::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryUserInfoResult::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryUserInfoResult::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& QueryUserInfoResult::message() const {
  return *message_;
}
inline void QueryUserInfoResult::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void QueryUserInfoResult::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void QueryUserInfoResult::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryUserInfoResult::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* QueryUserInfoResult::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .lhchat.OperateResultCode retCode = 2;
inline bool QueryUserInfoResult::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryUserInfoResult::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryUserInfoResult::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryUserInfoResult::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline lhchat::OperateResultCode QueryUserInfoResult::retcode() const {
  return static_cast< lhchat::OperateResultCode >(retcode_);
}
inline void QueryUserInfoResult::set_retcode(lhchat::OperateResultCode value) {
  GOOGLE_DCHECK(lhchat::OperateResultCode_IsValid(value));
  set_has_retcode();
  retcode_ = value;
}

// -------------------------------------------------------------------

// QueryBlackListResult

// optional bytes message = 1;
inline bool QueryBlackListResult::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryBlackListResult::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryBlackListResult::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryBlackListResult::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& QueryBlackListResult::message() const {
  return *message_;
}
inline void QueryBlackListResult::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void QueryBlackListResult::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void QueryBlackListResult::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryBlackListResult::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* QueryBlackListResult::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .lhchat.OperateResultCode retCode = 2;
inline bool QueryBlackListResult::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryBlackListResult::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryBlackListResult::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryBlackListResult::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline lhchat::OperateResultCode QueryBlackListResult::retcode() const {
  return static_cast< lhchat::OperateResultCode >(retcode_);
}
inline void QueryBlackListResult::set_retcode(lhchat::OperateResultCode value) {
  GOOGLE_DCHECK(lhchat::OperateResultCode_IsValid(value));
  set_has_retcode();
  retcode_ = value;
}

// required int32 leftCount = 3;
inline bool QueryBlackListResult::has_leftcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryBlackListResult::set_has_leftcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryBlackListResult::clear_has_leftcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryBlackListResult::clear_leftcount() {
  leftcount_ = 0;
  clear_has_leftcount();
}
inline ::google::protobuf::int32 QueryBlackListResult::leftcount() const {
  return leftcount_;
}
inline void QueryBlackListResult::set_leftcount(::google::protobuf::int32 value) {
  set_has_leftcount();
  leftcount_ = value;
}

// repeated int32 uid = 4;
inline int QueryBlackListResult::uid_size() const {
  return uid_.size();
}
inline void QueryBlackListResult::clear_uid() {
  uid_.Clear();
}
inline ::google::protobuf::int32 QueryBlackListResult::uid(int index) const {
  return uid_.Get(index);
}
inline void QueryBlackListResult::set_uid(int index, ::google::protobuf::int32 value) {
  uid_.Set(index, value);
}
inline void QueryBlackListResult::add_uid(::google::protobuf::int32 value) {
  uid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryBlackListResult::uid() const {
  return uid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryBlackListResult::mutable_uid() {
  return &uid_;
}

// -------------------------------------------------------------------

// QueryFriendListResult

// optional bytes message = 1;
inline bool QueryFriendListResult::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryFriendListResult::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryFriendListResult::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryFriendListResult::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& QueryFriendListResult::message() const {
  return *message_;
}
inline void QueryFriendListResult::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void QueryFriendListResult::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void QueryFriendListResult::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryFriendListResult::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* QueryFriendListResult::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .lhchat.OperateResultCode retCode = 2;
inline bool QueryFriendListResult::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryFriendListResult::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryFriendListResult::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryFriendListResult::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline lhchat::OperateResultCode QueryFriendListResult::retcode() const {
  return static_cast< lhchat::OperateResultCode >(retcode_);
}
inline void QueryFriendListResult::set_retcode(lhchat::OperateResultCode value) {
  GOOGLE_DCHECK(lhchat::OperateResultCode_IsValid(value));
  set_has_retcode();
  retcode_ = value;
}

// required int32 leftCount = 3;
inline bool QueryFriendListResult::has_leftcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryFriendListResult::set_has_leftcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryFriendListResult::clear_has_leftcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryFriendListResult::clear_leftcount() {
  leftcount_ = 0;
  clear_has_leftcount();
}
inline ::google::protobuf::int32 QueryFriendListResult::leftcount() const {
  return leftcount_;
}
inline void QueryFriendListResult::set_leftcount(::google::protobuf::int32 value) {
  set_has_leftcount();
  leftcount_ = value;
}

// repeated int32 friendId = 4;
inline int QueryFriendListResult::friendid_size() const {
  return friendid_.size();
}
inline void QueryFriendListResult::clear_friendid() {
  friendid_.Clear();
}
inline ::google::protobuf::int32 QueryFriendListResult::friendid(int index) const {
  return friendid_.Get(index);
}
inline void QueryFriendListResult::set_friendid(int index, ::google::protobuf::int32 value) {
  friendid_.Set(index, value);
}
inline void QueryFriendListResult::add_friendid(::google::protobuf::int32 value) {
  friendid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryFriendListResult::friendid() const {
  return friendid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryFriendListResult::mutable_friendid() {
  return &friendid_;
}

// -------------------------------------------------------------------

// QueryFriendInfoResult

// optional bytes message = 1;
inline bool QueryFriendInfoResult::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryFriendInfoResult::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryFriendInfoResult::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryFriendInfoResult::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& QueryFriendInfoResult::message() const {
  return *message_;
}
inline void QueryFriendInfoResult::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void QueryFriendInfoResult::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void QueryFriendInfoResult::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryFriendInfoResult::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* QueryFriendInfoResult::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .lhchat.OperateResultCode retCode = 2;
inline bool QueryFriendInfoResult::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryFriendInfoResult::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryFriendInfoResult::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryFriendInfoResult::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline lhchat::OperateResultCode QueryFriendInfoResult::retcode() const {
  return static_cast< lhchat::OperateResultCode >(retcode_);
}
inline void QueryFriendInfoResult::set_retcode(lhchat::OperateResultCode value) {
  GOOGLE_DCHECK(lhchat::OperateResultCode_IsValid(value));
  set_has_retcode();
  retcode_ = value;
}

// -------------------------------------------------------------------

// QueryFriendExtrasResult

// optional bytes message = 1;
inline bool QueryFriendExtrasResult::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryFriendExtrasResult::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryFriendExtrasResult::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryFriendExtrasResult::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& QueryFriendExtrasResult::message() const {
  return *message_;
}
inline void QueryFriendExtrasResult::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void QueryFriendExtrasResult::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void QueryFriendExtrasResult::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryFriendExtrasResult::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* QueryFriendExtrasResult::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .lhchat.OperateResultCode retCode = 2;
inline bool QueryFriendExtrasResult::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryFriendExtrasResult::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryFriendExtrasResult::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryFriendExtrasResult::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline lhchat::OperateResultCode QueryFriendExtrasResult::retcode() const {
  return static_cast< lhchat::OperateResultCode >(retcode_);
}
inline void QueryFriendExtrasResult::set_retcode(lhchat::OperateResultCode value) {
  GOOGLE_DCHECK(lhchat::OperateResultCode_IsValid(value));
  set_has_retcode();
  retcode_ = value;
}

// -------------------------------------------------------------------

// BuildAccessTokenResult

// required bytes channelName = 1;
inline bool BuildAccessTokenResult::has_channelname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuildAccessTokenResult::set_has_channelname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuildAccessTokenResult::clear_has_channelname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuildAccessTokenResult::clear_channelname() {
  if (channelname_ != &::google::protobuf::internal::kEmptyString) {
    channelname_->clear();
  }
  clear_has_channelname();
}
inline const ::std::string& BuildAccessTokenResult::channelname() const {
  return *channelname_;
}
inline void BuildAccessTokenResult::set_channelname(const ::std::string& value) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(value);
}
inline void BuildAccessTokenResult::set_channelname(const char* value) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(value);
}
inline void BuildAccessTokenResult::set_channelname(const void* value, size_t size) {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  channelname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BuildAccessTokenResult::mutable_channelname() {
  set_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    channelname_ = new ::std::string;
  }
  return channelname_;
}
inline ::std::string* BuildAccessTokenResult::release_channelname() {
  clear_has_channelname();
  if (channelname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelname_;
    channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .lhchat.ChannelKind channelKind = 2;
inline bool BuildAccessTokenResult::has_channelkind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuildAccessTokenResult::set_has_channelkind() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuildAccessTokenResult::clear_has_channelkind() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuildAccessTokenResult::clear_channelkind() {
  channelkind_ = 0;
  clear_has_channelkind();
}
inline lhchat::ChannelKind BuildAccessTokenResult::channelkind() const {
  return static_cast< lhchat::ChannelKind >(channelkind_);
}
inline void BuildAccessTokenResult::set_channelkind(lhchat::ChannelKind value) {
  GOOGLE_DCHECK(lhchat::ChannelKind_IsValid(value));
  set_has_channelkind();
  channelkind_ = value;
}

// optional bytes AccessToken = 3;
inline bool BuildAccessTokenResult::has_accesstoken() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuildAccessTokenResult::set_has_accesstoken() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuildAccessTokenResult::clear_has_accesstoken() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuildAccessTokenResult::clear_accesstoken() {
  if (accesstoken_ != &::google::protobuf::internal::kEmptyString) {
    accesstoken_->clear();
  }
  clear_has_accesstoken();
}
inline const ::std::string& BuildAccessTokenResult::accesstoken() const {
  return *accesstoken_;
}
inline void BuildAccessTokenResult::set_accesstoken(const ::std::string& value) {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::kEmptyString) {
    accesstoken_ = new ::std::string;
  }
  accesstoken_->assign(value);
}
inline void BuildAccessTokenResult::set_accesstoken(const char* value) {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::kEmptyString) {
    accesstoken_ = new ::std::string;
  }
  accesstoken_->assign(value);
}
inline void BuildAccessTokenResult::set_accesstoken(const void* value, size_t size) {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::kEmptyString) {
    accesstoken_ = new ::std::string;
  }
  accesstoken_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BuildAccessTokenResult::mutable_accesstoken() {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::kEmptyString) {
    accesstoken_ = new ::std::string;
  }
  return accesstoken_;
}
inline ::std::string* BuildAccessTokenResult::release_accesstoken() {
  clear_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accesstoken_;
    accesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lhchat

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_QueryServer_2eproto__INCLUDED
