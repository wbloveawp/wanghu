// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "QueryServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lhchat {

namespace {

const ::google::protobuf::Descriptor* SyncUserInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncUserInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUserInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUserInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryBlackListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryBlackListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryFriendListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryFriendListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryFriendInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryFriendInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryFriendExtrasRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryFriendExtrasRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildAccessTokenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildAccessTokenRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendExtrasList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendExtrasList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncUserInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncUserInfoResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUserInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUserInfoResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryBlackListResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryBlackListResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryFriendListResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryFriendListResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryFriendInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryFriendInfoResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryFriendExtrasResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryFriendExtrasResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildAccessTokenResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildAccessTokenResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_QueryServer_2eproto() {
  protobuf_AddDesc_QueryServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "QueryServer.proto");
  GOOGLE_CHECK(file != NULL);
  SyncUserInfoRequest_descriptor_ = file->message_type(0);
  static const int SyncUserInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserInfoRequest, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserInfoRequest, infoversion_),
  };
  SyncUserInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncUserInfoRequest_descriptor_,
      SyncUserInfoRequest::default_instance_,
      SyncUserInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncUserInfoRequest));
  QueryUserInfoRequest_descriptor_ = file->message_type(1);
  static const int QueryUserInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoRequest, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoRequest, type_),
  };
  QueryUserInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryUserInfoRequest_descriptor_,
      QueryUserInfoRequest::default_instance_,
      QueryUserInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryUserInfoRequest));
  QueryBlackListRequest_descriptor_ = file->message_type(2);
  static const int QueryBlackListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBlackListRequest, pagesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBlackListRequest, pageindex_),
  };
  QueryBlackListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryBlackListRequest_descriptor_,
      QueryBlackListRequest::default_instance_,
      QueryBlackListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBlackListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBlackListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryBlackListRequest));
  QueryFriendListRequest_descriptor_ = file->message_type(3);
  static const int QueryFriendListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendListRequest, pagesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendListRequest, pageindex_),
  };
  QueryFriendListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryFriendListRequest_descriptor_,
      QueryFriendListRequest::default_instance_,
      QueryFriendListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryFriendListRequest));
  QueryFriendInfoRequest_descriptor_ = file->message_type(4);
  static const int QueryFriendInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendInfoRequest, friendid_),
  };
  QueryFriendInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryFriendInfoRequest_descriptor_,
      QueryFriendInfoRequest::default_instance_,
      QueryFriendInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryFriendInfoRequest));
  QueryFriendExtrasRequest_descriptor_ = file->message_type(5);
  static const int QueryFriendExtrasRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendExtrasRequest, friendid_),
  };
  QueryFriendExtrasRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryFriendExtrasRequest_descriptor_,
      QueryFriendExtrasRequest::default_instance_,
      QueryFriendExtrasRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendExtrasRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendExtrasRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryFriendExtrasRequest));
  BuildAccessTokenRequest_descriptor_ = file->message_type(6);
  static const int BuildAccessTokenRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAccessTokenRequest, channelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAccessTokenRequest, channelkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAccessTokenRequest, masterorder_),
  };
  BuildAccessTokenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildAccessTokenRequest_descriptor_,
      BuildAccessTokenRequest::default_instance_,
      BuildAccessTokenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAccessTokenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAccessTokenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildAccessTokenRequest));
  UserInfoList_descriptor_ = file->message_type(7);
  static const int UserInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoList, userinfo_),
  };
  UserInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoList_descriptor_,
      UserInfoList::default_instance_,
      UserInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoList));
  FriendInfoList_descriptor_ = file->message_type(8);
  static const int FriendInfoList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoList, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoList, extrasinfo_),
  };
  FriendInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendInfoList_descriptor_,
      FriendInfoList::default_instance_,
      FriendInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendInfoList));
  FriendExtrasList_descriptor_ = file->message_type(9);
  static const int FriendExtrasList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendExtrasList, extrasinfo_),
  };
  FriendExtrasList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendExtrasList_descriptor_,
      FriendExtrasList::default_instance_,
      FriendExtrasList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendExtrasList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendExtrasList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendExtrasList));
  SyncUserInfoResult_descriptor_ = file->message_type(10);
  static const int SyncUserInfoResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserInfoResult, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserInfoResult, retcode_),
  };
  SyncUserInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncUserInfoResult_descriptor_,
      SyncUserInfoResult::default_instance_,
      SyncUserInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncUserInfoResult));
  QueryUserInfoResult_descriptor_ = file->message_type(11);
  static const int QueryUserInfoResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoResult, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoResult, retcode_),
  };
  QueryUserInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryUserInfoResult_descriptor_,
      QueryUserInfoResult::default_instance_,
      QueryUserInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryUserInfoResult));
  QueryBlackListResult_descriptor_ = file->message_type(12);
  static const int QueryBlackListResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBlackListResult, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBlackListResult, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBlackListResult, leftcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBlackListResult, uid_),
  };
  QueryBlackListResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryBlackListResult_descriptor_,
      QueryBlackListResult::default_instance_,
      QueryBlackListResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBlackListResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBlackListResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryBlackListResult));
  QueryFriendListResult_descriptor_ = file->message_type(13);
  static const int QueryFriendListResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendListResult, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendListResult, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendListResult, leftcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendListResult, friendid_),
  };
  QueryFriendListResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryFriendListResult_descriptor_,
      QueryFriendListResult::default_instance_,
      QueryFriendListResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendListResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendListResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryFriendListResult));
  QueryFriendInfoResult_descriptor_ = file->message_type(14);
  static const int QueryFriendInfoResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendInfoResult, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendInfoResult, retcode_),
  };
  QueryFriendInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryFriendInfoResult_descriptor_,
      QueryFriendInfoResult::default_instance_,
      QueryFriendInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryFriendInfoResult));
  QueryFriendExtrasResult_descriptor_ = file->message_type(15);
  static const int QueryFriendExtrasResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendExtrasResult, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendExtrasResult, retcode_),
  };
  QueryFriendExtrasResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryFriendExtrasResult_descriptor_,
      QueryFriendExtrasResult::default_instance_,
      QueryFriendExtrasResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendExtrasResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFriendExtrasResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryFriendExtrasResult));
  BuildAccessTokenResult_descriptor_ = file->message_type(16);
  static const int BuildAccessTokenResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAccessTokenResult, channelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAccessTokenResult, channelkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAccessTokenResult, accesstoken_),
  };
  BuildAccessTokenResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildAccessTokenResult_descriptor_,
      BuildAccessTokenResult::default_instance_,
      BuildAccessTokenResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAccessTokenResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAccessTokenResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildAccessTokenResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_QueryServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncUserInfoRequest_descriptor_, &SyncUserInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryUserInfoRequest_descriptor_, &QueryUserInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryBlackListRequest_descriptor_, &QueryBlackListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryFriendListRequest_descriptor_, &QueryFriendListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryFriendInfoRequest_descriptor_, &QueryFriendInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryFriendExtrasRequest_descriptor_, &QueryFriendExtrasRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildAccessTokenRequest_descriptor_, &BuildAccessTokenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoList_descriptor_, &UserInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendInfoList_descriptor_, &FriendInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendExtrasList_descriptor_, &FriendExtrasList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncUserInfoResult_descriptor_, &SyncUserInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryUserInfoResult_descriptor_, &QueryUserInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryBlackListResult_descriptor_, &QueryBlackListResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryFriendListResult_descriptor_, &QueryFriendListResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryFriendInfoResult_descriptor_, &QueryFriendInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryFriendExtrasResult_descriptor_, &QueryFriendExtrasResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildAccessTokenResult_descriptor_, &BuildAccessTokenResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_QueryServer_2eproto() {
  delete SyncUserInfoRequest::default_instance_;
  delete SyncUserInfoRequest_reflection_;
  delete QueryUserInfoRequest::default_instance_;
  delete QueryUserInfoRequest_reflection_;
  delete QueryBlackListRequest::default_instance_;
  delete QueryBlackListRequest_reflection_;
  delete QueryFriendListRequest::default_instance_;
  delete QueryFriendListRequest_reflection_;
  delete QueryFriendInfoRequest::default_instance_;
  delete QueryFriendInfoRequest_reflection_;
  delete QueryFriendExtrasRequest::default_instance_;
  delete QueryFriendExtrasRequest_reflection_;
  delete BuildAccessTokenRequest::default_instance_;
  delete BuildAccessTokenRequest_reflection_;
  delete UserInfoList::default_instance_;
  delete UserInfoList_reflection_;
  delete FriendInfoList::default_instance_;
  delete FriendInfoList_reflection_;
  delete FriendExtrasList::default_instance_;
  delete FriendExtrasList_reflection_;
  delete SyncUserInfoResult::default_instance_;
  delete SyncUserInfoResult_reflection_;
  delete QueryUserInfoResult::default_instance_;
  delete QueryUserInfoResult_reflection_;
  delete QueryBlackListResult::default_instance_;
  delete QueryBlackListResult_reflection_;
  delete QueryFriendListResult::default_instance_;
  delete QueryFriendListResult_reflection_;
  delete QueryFriendInfoResult::default_instance_;
  delete QueryFriendInfoResult_reflection_;
  delete QueryFriendExtrasResult::default_instance_;
  delete QueryFriendExtrasResult_reflection_;
  delete BuildAccessTokenResult::default_instance_;
  delete BuildAccessTokenResult_reflection_;
}

void protobuf_AddDesc_QueryServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::lhchat::protobuf_AddDesc_Struct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021QueryServer.proto\022\006lhchat\032\014Struct.prot"
    "o\"7\n\023SyncUserInfoRequest\022\013\n\003uid\030\001 \003(\005\022\023\n"
    "\013infoVersion\030\002 \003(\014\"J\n\024QueryUserInfoReque"
    "st\022\020\n\010ObjectId\030\001 \003(\005\022 \n\004type\030\002 \001(\0162\022.lhc"
    "hat.SearchType\"<\n\025QueryBlackListRequest\022"
    "\020\n\010pageSize\030\001 \002(\005\022\021\n\tpageIndex\030\002 \002(\005\"=\n\026"
    "QueryFriendListRequest\022\020\n\010pageSize\030\001 \002(\005"
    "\022\021\n\tpageIndex\030\002 \002(\005\"*\n\026QueryFriendInfoRe"
    "quest\022\020\n\010friendId\030\001 \003(\005\",\n\030QueryFriendEx"
    "trasRequest\022\020\n\010friendId\030\001 \003(\005\"m\n\027BuildAc"
    "cessTokenRequest\022\023\n\013channelName\030\001 \002(\014\022(\n"
    "\013channelKind\030\002 \002(\0162\023.lhchat.ChannelKind\022"
    "\023\n\013masterOrder\030\003 \001(\005\" \n\014UserInfoList\022\020\n\010"
    "userInfo\030\001 \003(\014\"6\n\016FriendInfoList\022\020\n\010user"
    "Info\030\001 \003(\014\022\022\n\nExtrasInfo\030\002 \003(\014\"&\n\020Friend"
    "ExtrasList\022\022\n\nExtrasInfo\030\001 \003(\014\"Q\n\022SyncUs"
    "erInfoResult\022\017\n\007message\030\001 \001(\014\022*\n\007retCode"
    "\030\002 \002(\0162\031.lhchat.OperateResultCode\"R\n\023Que"
    "ryUserInfoResult\022\017\n\007message\030\001 \001(\014\022*\n\007ret"
    "Code\030\002 \002(\0162\031.lhchat.OperateResultCode\"s\n"
    "\024QueryBlackListResult\022\017\n\007message\030\001 \001(\014\022*"
    "\n\007retCode\030\002 \002(\0162\031.lhchat.OperateResultCo"
    "de\022\021\n\tleftCount\030\003 \002(\005\022\013\n\003uid\030\004 \003(\005\"y\n\025Qu"
    "eryFriendListResult\022\017\n\007message\030\001 \001(\014\022*\n\007"
    "retCode\030\002 \002(\0162\031.lhchat.OperateResultCode"
    "\022\021\n\tleftCount\030\003 \002(\005\022\020\n\010friendId\030\004 \003(\005\"T\n"
    "\025QueryFriendInfoResult\022\017\n\007message\030\001 \001(\014\022"
    "*\n\007retCode\030\002 \002(\0162\031.lhchat.OperateResultC"
    "ode\"V\n\027QueryFriendExtrasResult\022\017\n\007messag"
    "e\030\001 \001(\014\022*\n\007retCode\030\002 \002(\0162\031.lhchat.Operat"
    "eResultCode\"l\n\026BuildAccessTokenResult\022\023\n"
    "\013channelName\030\001 \002(\014\022(\n\013channelKind\030\002 \002(\0162"
    "\023.lhchat.ChannelKind\022\023\n\013AccessToken\030\003 \001("
    "\014", 1321);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "QueryServer.proto", &protobuf_RegisterTypes);
  SyncUserInfoRequest::default_instance_ = new SyncUserInfoRequest();
  QueryUserInfoRequest::default_instance_ = new QueryUserInfoRequest();
  QueryBlackListRequest::default_instance_ = new QueryBlackListRequest();
  QueryFriendListRequest::default_instance_ = new QueryFriendListRequest();
  QueryFriendInfoRequest::default_instance_ = new QueryFriendInfoRequest();
  QueryFriendExtrasRequest::default_instance_ = new QueryFriendExtrasRequest();
  BuildAccessTokenRequest::default_instance_ = new BuildAccessTokenRequest();
  UserInfoList::default_instance_ = new UserInfoList();
  FriendInfoList::default_instance_ = new FriendInfoList();
  FriendExtrasList::default_instance_ = new FriendExtrasList();
  SyncUserInfoResult::default_instance_ = new SyncUserInfoResult();
  QueryUserInfoResult::default_instance_ = new QueryUserInfoResult();
  QueryBlackListResult::default_instance_ = new QueryBlackListResult();
  QueryFriendListResult::default_instance_ = new QueryFriendListResult();
  QueryFriendInfoResult::default_instance_ = new QueryFriendInfoResult();
  QueryFriendExtrasResult::default_instance_ = new QueryFriendExtrasResult();
  BuildAccessTokenResult::default_instance_ = new BuildAccessTokenResult();
  SyncUserInfoRequest::default_instance_->InitAsDefaultInstance();
  QueryUserInfoRequest::default_instance_->InitAsDefaultInstance();
  QueryBlackListRequest::default_instance_->InitAsDefaultInstance();
  QueryFriendListRequest::default_instance_->InitAsDefaultInstance();
  QueryFriendInfoRequest::default_instance_->InitAsDefaultInstance();
  QueryFriendExtrasRequest::default_instance_->InitAsDefaultInstance();
  BuildAccessTokenRequest::default_instance_->InitAsDefaultInstance();
  UserInfoList::default_instance_->InitAsDefaultInstance();
  FriendInfoList::default_instance_->InitAsDefaultInstance();
  FriendExtrasList::default_instance_->InitAsDefaultInstance();
  SyncUserInfoResult::default_instance_->InitAsDefaultInstance();
  QueryUserInfoResult::default_instance_->InitAsDefaultInstance();
  QueryBlackListResult::default_instance_->InitAsDefaultInstance();
  QueryFriendListResult::default_instance_->InitAsDefaultInstance();
  QueryFriendInfoResult::default_instance_->InitAsDefaultInstance();
  QueryFriendExtrasResult::default_instance_->InitAsDefaultInstance();
  BuildAccessTokenResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_QueryServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_QueryServer_2eproto {
  StaticDescriptorInitializer_QueryServer_2eproto() {
    protobuf_AddDesc_QueryServer_2eproto();
  }
} static_descriptor_initializer_QueryServer_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SyncUserInfoRequest::kUidFieldNumber;
const int SyncUserInfoRequest::kInfoVersionFieldNumber;
#endif  // !_MSC_VER

SyncUserInfoRequest::SyncUserInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncUserInfoRequest::InitAsDefaultInstance() {
}

SyncUserInfoRequest::SyncUserInfoRequest(const SyncUserInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncUserInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncUserInfoRequest::~SyncUserInfoRequest() {
  SharedDtor();
}

void SyncUserInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncUserInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncUserInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncUserInfoRequest_descriptor_;
}

const SyncUserInfoRequest& SyncUserInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueryServer_2eproto();  return *default_instance_;
}

SyncUserInfoRequest* SyncUserInfoRequest::default_instance_ = NULL;

SyncUserInfoRequest* SyncUserInfoRequest::New() const {
  return new SyncUserInfoRequest;
}

void SyncUserInfoRequest::Clear() {
  uid_.Clear();
  infoversion_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncUserInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_uid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_uid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_uid;
        if (input->ExpectTag(18)) goto parse_infoVersion;
        break;
      }
      
      // repeated bytes infoVersion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infoVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_infoversion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infoVersion;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncUserInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 uid = 1;
  for (int i = 0; i < this->uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->uid(i), output);
  }
  
  // repeated bytes infoVersion = 2;
  for (int i = 0; i < this->infoversion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->infoversion(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncUserInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 uid = 1;
  for (int i = 0; i < this->uid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->uid(i), target);
  }
  
  // repeated bytes infoVersion = 2;
  for (int i = 0; i < this->infoversion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->infoversion(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncUserInfoRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 uid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->uid(i));
    }
    total_size += 1 * this->uid_size() + data_size;
  }
  
  // repeated bytes infoVersion = 2;
  total_size += 1 * this->infoversion_size();
  for (int i = 0; i < this->infoversion_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->infoversion(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncUserInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncUserInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncUserInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncUserInfoRequest::MergeFrom(const SyncUserInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  uid_.MergeFrom(from.uid_);
  infoversion_.MergeFrom(from.infoversion_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncUserInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncUserInfoRequest::CopyFrom(const SyncUserInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncUserInfoRequest::IsInitialized() const {
  
  return true;
}

void SyncUserInfoRequest::Swap(SyncUserInfoRequest* other) {
  if (other != this) {
    uid_.Swap(&other->uid_);
    infoversion_.Swap(&other->infoversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncUserInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncUserInfoRequest_descriptor_;
  metadata.reflection = SyncUserInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryUserInfoRequest::kObjectIdFieldNumber;
const int QueryUserInfoRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

QueryUserInfoRequest::QueryUserInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryUserInfoRequest::InitAsDefaultInstance() {
}

QueryUserInfoRequest::QueryUserInfoRequest(const QueryUserInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryUserInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUserInfoRequest::~QueryUserInfoRequest() {
  SharedDtor();
}

void QueryUserInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryUserInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUserInfoRequest_descriptor_;
}

const QueryUserInfoRequest& QueryUserInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueryServer_2eproto();  return *default_instance_;
}

QueryUserInfoRequest* QueryUserInfoRequest::default_instance_ = NULL;

QueryUserInfoRequest* QueryUserInfoRequest::New() const {
  return new QueryUserInfoRequest;
}

void QueryUserInfoRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 1;
  }
  objectid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryUserInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ObjectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObjectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_objectid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_objectid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ObjectId;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .lhchat.SearchType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lhchat::SearchType_IsValid(value)) {
            set_type(static_cast< lhchat::SearchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryUserInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 ObjectId = 1;
  for (int i = 0; i < this->objectid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->objectid(i), output);
  }
  
  // optional .lhchat.SearchType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryUserInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 ObjectId = 1;
  for (int i = 0; i < this->objectid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->objectid(i), target);
  }
  
  // optional .lhchat.SearchType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryUserInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .lhchat.SearchType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  // repeated int32 ObjectId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->objectid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->objectid(i));
    }
    total_size += 1 * this->objectid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryUserInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryUserInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryUserInfoRequest::MergeFrom(const QueryUserInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  objectid_.MergeFrom(from.objectid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryUserInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserInfoRequest::CopyFrom(const QueryUserInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserInfoRequest::IsInitialized() const {
  
  return true;
}

void QueryUserInfoRequest::Swap(QueryUserInfoRequest* other) {
  if (other != this) {
    objectid_.Swap(&other->objectid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryUserInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUserInfoRequest_descriptor_;
  metadata.reflection = QueryUserInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryBlackListRequest::kPageSizeFieldNumber;
const int QueryBlackListRequest::kPageIndexFieldNumber;
#endif  // !_MSC_VER

QueryBlackListRequest::QueryBlackListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryBlackListRequest::InitAsDefaultInstance() {
}

QueryBlackListRequest::QueryBlackListRequest(const QueryBlackListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryBlackListRequest::SharedCtor() {
  _cached_size_ = 0;
  pagesize_ = 0;
  pageindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryBlackListRequest::~QueryBlackListRequest() {
  SharedDtor();
}

void QueryBlackListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryBlackListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryBlackListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryBlackListRequest_descriptor_;
}

const QueryBlackListRequest& QueryBlackListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueryServer_2eproto();  return *default_instance_;
}

QueryBlackListRequest* QueryBlackListRequest::default_instance_ = NULL;

QueryBlackListRequest* QueryBlackListRequest::New() const {
  return new QueryBlackListRequest;
}

void QueryBlackListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pagesize_ = 0;
    pageindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryBlackListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pageSize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagesize_)));
          set_has_pagesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pageIndex;
        break;
      }
      
      // required int32 pageIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pageindex_)));
          set_has_pageindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryBlackListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pageSize = 1;
  if (has_pagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pagesize(), output);
  }
  
  // required int32 pageIndex = 2;
  if (has_pageindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pageindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryBlackListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pageSize = 1;
  if (has_pagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pagesize(), target);
  }
  
  // required int32 pageIndex = 2;
  if (has_pageindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pageindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryBlackListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pageSize = 1;
    if (has_pagesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pagesize());
    }
    
    // required int32 pageIndex = 2;
    if (has_pageindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pageindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryBlackListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryBlackListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryBlackListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryBlackListRequest::MergeFrom(const QueryBlackListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pagesize()) {
      set_pagesize(from.pagesize());
    }
    if (from.has_pageindex()) {
      set_pageindex(from.pageindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryBlackListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBlackListRequest::CopyFrom(const QueryBlackListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBlackListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void QueryBlackListRequest::Swap(QueryBlackListRequest* other) {
  if (other != this) {
    std::swap(pagesize_, other->pagesize_);
    std::swap(pageindex_, other->pageindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryBlackListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryBlackListRequest_descriptor_;
  metadata.reflection = QueryBlackListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryFriendListRequest::kPageSizeFieldNumber;
const int QueryFriendListRequest::kPageIndexFieldNumber;
#endif  // !_MSC_VER

QueryFriendListRequest::QueryFriendListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryFriendListRequest::InitAsDefaultInstance() {
}

QueryFriendListRequest::QueryFriendListRequest(const QueryFriendListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryFriendListRequest::SharedCtor() {
  _cached_size_ = 0;
  pagesize_ = 0;
  pageindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryFriendListRequest::~QueryFriendListRequest() {
  SharedDtor();
}

void QueryFriendListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryFriendListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryFriendListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryFriendListRequest_descriptor_;
}

const QueryFriendListRequest& QueryFriendListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueryServer_2eproto();  return *default_instance_;
}

QueryFriendListRequest* QueryFriendListRequest::default_instance_ = NULL;

QueryFriendListRequest* QueryFriendListRequest::New() const {
  return new QueryFriendListRequest;
}

void QueryFriendListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pagesize_ = 0;
    pageindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryFriendListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pageSize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagesize_)));
          set_has_pagesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pageIndex;
        break;
      }
      
      // required int32 pageIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pageindex_)));
          set_has_pageindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryFriendListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pageSize = 1;
  if (has_pagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pagesize(), output);
  }
  
  // required int32 pageIndex = 2;
  if (has_pageindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pageindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryFriendListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pageSize = 1;
  if (has_pagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pagesize(), target);
  }
  
  // required int32 pageIndex = 2;
  if (has_pageindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pageindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryFriendListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pageSize = 1;
    if (has_pagesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pagesize());
    }
    
    // required int32 pageIndex = 2;
    if (has_pageindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pageindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryFriendListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryFriendListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryFriendListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryFriendListRequest::MergeFrom(const QueryFriendListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pagesize()) {
      set_pagesize(from.pagesize());
    }
    if (from.has_pageindex()) {
      set_pageindex(from.pageindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryFriendListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFriendListRequest::CopyFrom(const QueryFriendListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFriendListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void QueryFriendListRequest::Swap(QueryFriendListRequest* other) {
  if (other != this) {
    std::swap(pagesize_, other->pagesize_);
    std::swap(pageindex_, other->pageindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryFriendListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryFriendListRequest_descriptor_;
  metadata.reflection = QueryFriendListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryFriendInfoRequest::kFriendIdFieldNumber;
#endif  // !_MSC_VER

QueryFriendInfoRequest::QueryFriendInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryFriendInfoRequest::InitAsDefaultInstance() {
}

QueryFriendInfoRequest::QueryFriendInfoRequest(const QueryFriendInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryFriendInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryFriendInfoRequest::~QueryFriendInfoRequest() {
  SharedDtor();
}

void QueryFriendInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryFriendInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryFriendInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryFriendInfoRequest_descriptor_;
}

const QueryFriendInfoRequest& QueryFriendInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueryServer_2eproto();  return *default_instance_;
}

QueryFriendInfoRequest* QueryFriendInfoRequest::default_instance_ = NULL;

QueryFriendInfoRequest* QueryFriendInfoRequest::New() const {
  return new QueryFriendInfoRequest;
}

void QueryFriendInfoRequest::Clear() {
  friendid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryFriendInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 friendId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_friendid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_friendid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_friendId;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryFriendInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 friendId = 1;
  for (int i = 0; i < this->friendid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->friendid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryFriendInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 friendId = 1;
  for (int i = 0; i < this->friendid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->friendid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryFriendInfoRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 friendId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->friendid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->friendid(i));
    }
    total_size += 1 * this->friendid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryFriendInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryFriendInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryFriendInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryFriendInfoRequest::MergeFrom(const QueryFriendInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendid_.MergeFrom(from.friendid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryFriendInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFriendInfoRequest::CopyFrom(const QueryFriendInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFriendInfoRequest::IsInitialized() const {
  
  return true;
}

void QueryFriendInfoRequest::Swap(QueryFriendInfoRequest* other) {
  if (other != this) {
    friendid_.Swap(&other->friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryFriendInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryFriendInfoRequest_descriptor_;
  metadata.reflection = QueryFriendInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryFriendExtrasRequest::kFriendIdFieldNumber;
#endif  // !_MSC_VER

QueryFriendExtrasRequest::QueryFriendExtrasRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryFriendExtrasRequest::InitAsDefaultInstance() {
}

QueryFriendExtrasRequest::QueryFriendExtrasRequest(const QueryFriendExtrasRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryFriendExtrasRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryFriendExtrasRequest::~QueryFriendExtrasRequest() {
  SharedDtor();
}

void QueryFriendExtrasRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryFriendExtrasRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryFriendExtrasRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryFriendExtrasRequest_descriptor_;
}

const QueryFriendExtrasRequest& QueryFriendExtrasRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueryServer_2eproto();  return *default_instance_;
}

QueryFriendExtrasRequest* QueryFriendExtrasRequest::default_instance_ = NULL;

QueryFriendExtrasRequest* QueryFriendExtrasRequest::New() const {
  return new QueryFriendExtrasRequest;
}

void QueryFriendExtrasRequest::Clear() {
  friendid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryFriendExtrasRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 friendId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_friendid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_friendid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_friendId;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryFriendExtrasRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 friendId = 1;
  for (int i = 0; i < this->friendid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->friendid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryFriendExtrasRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 friendId = 1;
  for (int i = 0; i < this->friendid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->friendid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryFriendExtrasRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 friendId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->friendid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->friendid(i));
    }
    total_size += 1 * this->friendid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryFriendExtrasRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryFriendExtrasRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryFriendExtrasRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryFriendExtrasRequest::MergeFrom(const QueryFriendExtrasRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendid_.MergeFrom(from.friendid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryFriendExtrasRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFriendExtrasRequest::CopyFrom(const QueryFriendExtrasRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFriendExtrasRequest::IsInitialized() const {
  
  return true;
}

void QueryFriendExtrasRequest::Swap(QueryFriendExtrasRequest* other) {
  if (other != this) {
    friendid_.Swap(&other->friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryFriendExtrasRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryFriendExtrasRequest_descriptor_;
  metadata.reflection = QueryFriendExtrasRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildAccessTokenRequest::kChannelNameFieldNumber;
const int BuildAccessTokenRequest::kChannelKindFieldNumber;
const int BuildAccessTokenRequest::kMasterOrderFieldNumber;
#endif  // !_MSC_VER

BuildAccessTokenRequest::BuildAccessTokenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildAccessTokenRequest::InitAsDefaultInstance() {
}

BuildAccessTokenRequest::BuildAccessTokenRequest(const BuildAccessTokenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildAccessTokenRequest::SharedCtor() {
  _cached_size_ = 0;
  channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelkind_ = 0;
  masterorder_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildAccessTokenRequest::~BuildAccessTokenRequest() {
  SharedDtor();
}

void BuildAccessTokenRequest::SharedDtor() {
  if (channelname_ != &::google::protobuf::internal::kEmptyString) {
    delete channelname_;
  }
  if (this != default_instance_) {
  }
}

void BuildAccessTokenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildAccessTokenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildAccessTokenRequest_descriptor_;
}

const BuildAccessTokenRequest& BuildAccessTokenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueryServer_2eproto();  return *default_instance_;
}

BuildAccessTokenRequest* BuildAccessTokenRequest::default_instance_ = NULL;

BuildAccessTokenRequest* BuildAccessTokenRequest::New() const {
  return new BuildAccessTokenRequest;
}

void BuildAccessTokenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channelname()) {
      if (channelname_ != &::google::protobuf::internal::kEmptyString) {
        channelname_->clear();
      }
    }
    channelkind_ = 0;
    masterorder_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildAccessTokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes channelName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_channelname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channelKind;
        break;
      }
      
      // required .lhchat.ChannelKind channelKind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelKind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lhchat::ChannelKind_IsValid(value)) {
            set_channelkind(static_cast< lhchat::ChannelKind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_masterOrder;
        break;
      }
      
      // optional int32 masterOrder = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_masterOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &masterorder_)));
          set_has_masterorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildAccessTokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes channelName = 1;
  if (has_channelname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->channelname(), output);
  }
  
  // required .lhchat.ChannelKind channelKind = 2;
  if (has_channelkind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->channelkind(), output);
  }
  
  // optional int32 masterOrder = 3;
  if (has_masterorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->masterorder(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildAccessTokenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes channelName = 1;
  if (has_channelname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->channelname(), target);
  }
  
  // required .lhchat.ChannelKind channelKind = 2;
  if (has_channelkind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->channelkind(), target);
  }
  
  // optional int32 masterOrder = 3;
  if (has_masterorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->masterorder(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildAccessTokenRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes channelName = 1;
    if (has_channelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->channelname());
    }
    
    // required .lhchat.ChannelKind channelKind = 2;
    if (has_channelkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channelkind());
    }
    
    // optional int32 masterOrder = 3;
    if (has_masterorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->masterorder());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildAccessTokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildAccessTokenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildAccessTokenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildAccessTokenRequest::MergeFrom(const BuildAccessTokenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channelname()) {
      set_channelname(from.channelname());
    }
    if (from.has_channelkind()) {
      set_channelkind(from.channelkind());
    }
    if (from.has_masterorder()) {
      set_masterorder(from.masterorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildAccessTokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildAccessTokenRequest::CopyFrom(const BuildAccessTokenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAccessTokenRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BuildAccessTokenRequest::Swap(BuildAccessTokenRequest* other) {
  if (other != this) {
    std::swap(channelname_, other->channelname_);
    std::swap(channelkind_, other->channelkind_);
    std::swap(masterorder_, other->masterorder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildAccessTokenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildAccessTokenRequest_descriptor_;
  metadata.reflection = BuildAccessTokenRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfoList::kUserInfoFieldNumber;
#endif  // !_MSC_VER

UserInfoList::UserInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfoList::InitAsDefaultInstance() {
}

UserInfoList::UserInfoList(const UserInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoList::~UserInfoList() {
  SharedDtor();
}

void UserInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoList_descriptor_;
}

const UserInfoList& UserInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueryServer_2eproto();  return *default_instance_;
}

UserInfoList* UserInfoList::default_instance_ = NULL;

UserInfoList* UserInfoList::New() const {
  return new UserInfoList;
}

void UserInfoList::Clear() {
  userinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes userInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_userInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes userInfo = 1;
  for (int i = 0; i < this->userinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->userinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes userInfo = 1;
  for (int i = 0; i < this->userinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->userinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfoList::ByteSize() const {
  int total_size = 0;
  
  // repeated bytes userInfo = 1;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->userinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoList::MergeFrom(const UserInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  userinfo_.MergeFrom(from.userinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoList::CopyFrom(const UserInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoList::IsInitialized() const {
  
  return true;
}

void UserInfoList::Swap(UserInfoList* other) {
  if (other != this) {
    userinfo_.Swap(&other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoList_descriptor_;
  metadata.reflection = UserInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendInfoList::kUserInfoFieldNumber;
const int FriendInfoList::kExtrasInfoFieldNumber;
#endif  // !_MSC_VER

FriendInfoList::FriendInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendInfoList::InitAsDefaultInstance() {
}

FriendInfoList::FriendInfoList(const FriendInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendInfoList::~FriendInfoList() {
  SharedDtor();
}

void FriendInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendInfoList_descriptor_;
}

const FriendInfoList& FriendInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueryServer_2eproto();  return *default_instance_;
}

FriendInfoList* FriendInfoList::default_instance_ = NULL;

FriendInfoList* FriendInfoList::New() const {
  return new FriendInfoList;
}

void FriendInfoList::Clear() {
  userinfo_.Clear();
  extrasinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes userInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_userInfo;
        if (input->ExpectTag(18)) goto parse_ExtrasInfo;
        break;
      }
      
      // repeated bytes ExtrasInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExtrasInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_extrasinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ExtrasInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes userInfo = 1;
  for (int i = 0; i < this->userinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->userinfo(i), output);
  }
  
  // repeated bytes ExtrasInfo = 2;
  for (int i = 0; i < this->extrasinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->extrasinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes userInfo = 1;
  for (int i = 0; i < this->userinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->userinfo(i), target);
  }
  
  // repeated bytes ExtrasInfo = 2;
  for (int i = 0; i < this->extrasinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->extrasinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendInfoList::ByteSize() const {
  int total_size = 0;
  
  // repeated bytes userInfo = 1;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->userinfo(i));
  }
  
  // repeated bytes ExtrasInfo = 2;
  total_size += 1 * this->extrasinfo_size();
  for (int i = 0; i < this->extrasinfo_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->extrasinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendInfoList::MergeFrom(const FriendInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  userinfo_.MergeFrom(from.userinfo_);
  extrasinfo_.MergeFrom(from.extrasinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInfoList::CopyFrom(const FriendInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfoList::IsInitialized() const {
  
  return true;
}

void FriendInfoList::Swap(FriendInfoList* other) {
  if (other != this) {
    userinfo_.Swap(&other->userinfo_);
    extrasinfo_.Swap(&other->extrasinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendInfoList_descriptor_;
  metadata.reflection = FriendInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendExtrasList::kExtrasInfoFieldNumber;
#endif  // !_MSC_VER

FriendExtrasList::FriendExtrasList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendExtrasList::InitAsDefaultInstance() {
}

FriendExtrasList::FriendExtrasList(const FriendExtrasList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendExtrasList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendExtrasList::~FriendExtrasList() {
  SharedDtor();
}

void FriendExtrasList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendExtrasList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendExtrasList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendExtrasList_descriptor_;
}

const FriendExtrasList& FriendExtrasList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueryServer_2eproto();  return *default_instance_;
}

FriendExtrasList* FriendExtrasList::default_instance_ = NULL;

FriendExtrasList* FriendExtrasList::New() const {
  return new FriendExtrasList;
}

void FriendExtrasList::Clear() {
  extrasinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendExtrasList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes ExtrasInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExtrasInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_extrasinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ExtrasInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendExtrasList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes ExtrasInfo = 1;
  for (int i = 0; i < this->extrasinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->extrasinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendExtrasList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes ExtrasInfo = 1;
  for (int i = 0; i < this->extrasinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->extrasinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendExtrasList::ByteSize() const {
  int total_size = 0;
  
  // repeated bytes ExtrasInfo = 1;
  total_size += 1 * this->extrasinfo_size();
  for (int i = 0; i < this->extrasinfo_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->extrasinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendExtrasList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendExtrasList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendExtrasList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendExtrasList::MergeFrom(const FriendExtrasList& from) {
  GOOGLE_CHECK_NE(&from, this);
  extrasinfo_.MergeFrom(from.extrasinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendExtrasList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendExtrasList::CopyFrom(const FriendExtrasList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendExtrasList::IsInitialized() const {
  
  return true;
}

void FriendExtrasList::Swap(FriendExtrasList* other) {
  if (other != this) {
    extrasinfo_.Swap(&other->extrasinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendExtrasList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendExtrasList_descriptor_;
  metadata.reflection = FriendExtrasList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncUserInfoResult::kMessageFieldNumber;
const int SyncUserInfoResult::kRetCodeFieldNumber;
#endif  // !_MSC_VER

SyncUserInfoResult::SyncUserInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncUserInfoResult::InitAsDefaultInstance() {
}

SyncUserInfoResult::SyncUserInfoResult(const SyncUserInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncUserInfoResult::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncUserInfoResult::~SyncUserInfoResult() {
  SharedDtor();
}

void SyncUserInfoResult::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void SyncUserInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncUserInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncUserInfoResult_descriptor_;
}

const SyncUserInfoResult& SyncUserInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueryServer_2eproto();  return *default_instance_;
}

SyncUserInfoResult* SyncUserInfoResult::default_instance_ = NULL;

SyncUserInfoResult* SyncUserInfoResult::New() const {
  return new SyncUserInfoResult;
}

void SyncUserInfoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncUserInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retCode;
        break;
      }
      
      // required .lhchat.OperateResultCode retCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retCode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lhchat::OperateResultCode_IsValid(value)) {
            set_retcode(static_cast< lhchat::OperateResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncUserInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->message(), output);
  }
  
  // required .lhchat.OperateResultCode retCode = 2;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->retcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncUserInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes message = 1;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->message(), target);
  }
  
  // required .lhchat.OperateResultCode retCode = 2;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->retcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncUserInfoResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }
    
    // required .lhchat.OperateResultCode retCode = 2;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncUserInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncUserInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncUserInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncUserInfoResult::MergeFrom(const SyncUserInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncUserInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncUserInfoResult::CopyFrom(const SyncUserInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncUserInfoResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void SyncUserInfoResult::Swap(SyncUserInfoResult* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncUserInfoResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncUserInfoResult_descriptor_;
  metadata.reflection = SyncUserInfoResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryUserInfoResult::kMessageFieldNumber;
const int QueryUserInfoResult::kRetCodeFieldNumber;
#endif  // !_MSC_VER

QueryUserInfoResult::QueryUserInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryUserInfoResult::InitAsDefaultInstance() {
}

QueryUserInfoResult::QueryUserInfoResult(const QueryUserInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryUserInfoResult::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUserInfoResult::~QueryUserInfoResult() {
  SharedDtor();
}

void QueryUserInfoResult::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void QueryUserInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUserInfoResult_descriptor_;
}

const QueryUserInfoResult& QueryUserInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueryServer_2eproto();  return *default_instance_;
}

QueryUserInfoResult* QueryUserInfoResult::default_instance_ = NULL;

QueryUserInfoResult* QueryUserInfoResult::New() const {
  return new QueryUserInfoResult;
}

void QueryUserInfoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryUserInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retCode;
        break;
      }
      
      // required .lhchat.OperateResultCode retCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retCode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lhchat::OperateResultCode_IsValid(value)) {
            set_retcode(static_cast< lhchat::OperateResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryUserInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->message(), output);
  }
  
  // required .lhchat.OperateResultCode retCode = 2;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->retcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryUserInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes message = 1;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->message(), target);
  }
  
  // required .lhchat.OperateResultCode retCode = 2;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->retcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryUserInfoResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }
    
    // required .lhchat.OperateResultCode retCode = 2;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryUserInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryUserInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryUserInfoResult::MergeFrom(const QueryUserInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryUserInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserInfoResult::CopyFrom(const QueryUserInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserInfoResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void QueryUserInfoResult::Swap(QueryUserInfoResult* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryUserInfoResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUserInfoResult_descriptor_;
  metadata.reflection = QueryUserInfoResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryBlackListResult::kMessageFieldNumber;
const int QueryBlackListResult::kRetCodeFieldNumber;
const int QueryBlackListResult::kLeftCountFieldNumber;
const int QueryBlackListResult::kUidFieldNumber;
#endif  // !_MSC_VER

QueryBlackListResult::QueryBlackListResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryBlackListResult::InitAsDefaultInstance() {
}

QueryBlackListResult::QueryBlackListResult(const QueryBlackListResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryBlackListResult::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  retcode_ = 0;
  leftcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryBlackListResult::~QueryBlackListResult() {
  SharedDtor();
}

void QueryBlackListResult::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void QueryBlackListResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryBlackListResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryBlackListResult_descriptor_;
}

const QueryBlackListResult& QueryBlackListResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueryServer_2eproto();  return *default_instance_;
}

QueryBlackListResult* QueryBlackListResult::default_instance_ = NULL;

QueryBlackListResult* QueryBlackListResult::New() const {
  return new QueryBlackListResult;
}

void QueryBlackListResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    retcode_ = 0;
    leftcount_ = 0;
  }
  uid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryBlackListResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retCode;
        break;
      }
      
      // required .lhchat.OperateResultCode retCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retCode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lhchat::OperateResultCode_IsValid(value)) {
            set_retcode(static_cast< lhchat::OperateResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leftCount;
        break;
      }
      
      // required int32 leftCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftcount_)));
          set_has_leftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }
      
      // repeated int32 uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_uid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_uid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryBlackListResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->message(), output);
  }
  
  // required .lhchat.OperateResultCode retCode = 2;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->retcode(), output);
  }
  
  // required int32 leftCount = 3;
  if (has_leftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leftcount(), output);
  }
  
  // repeated int32 uid = 4;
  for (int i = 0; i < this->uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->uid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryBlackListResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes message = 1;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->message(), target);
  }
  
  // required .lhchat.OperateResultCode retCode = 2;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->retcode(), target);
  }
  
  // required int32 leftCount = 3;
  if (has_leftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leftcount(), target);
  }
  
  // repeated int32 uid = 4;
  for (int i = 0; i < this->uid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->uid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryBlackListResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }
    
    // required .lhchat.OperateResultCode retCode = 2;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }
    
    // required int32 leftCount = 3;
    if (has_leftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftcount());
    }
    
  }
  // repeated int32 uid = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->uid(i));
    }
    total_size += 1 * this->uid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryBlackListResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryBlackListResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryBlackListResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryBlackListResult::MergeFrom(const QueryBlackListResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  uid_.MergeFrom(from.uid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_leftcount()) {
      set_leftcount(from.leftcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryBlackListResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBlackListResult::CopyFrom(const QueryBlackListResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBlackListResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void QueryBlackListResult::Swap(QueryBlackListResult* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(retcode_, other->retcode_);
    std::swap(leftcount_, other->leftcount_);
    uid_.Swap(&other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryBlackListResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryBlackListResult_descriptor_;
  metadata.reflection = QueryBlackListResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryFriendListResult::kMessageFieldNumber;
const int QueryFriendListResult::kRetCodeFieldNumber;
const int QueryFriendListResult::kLeftCountFieldNumber;
const int QueryFriendListResult::kFriendIdFieldNumber;
#endif  // !_MSC_VER

QueryFriendListResult::QueryFriendListResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryFriendListResult::InitAsDefaultInstance() {
}

QueryFriendListResult::QueryFriendListResult(const QueryFriendListResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryFriendListResult::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  retcode_ = 0;
  leftcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryFriendListResult::~QueryFriendListResult() {
  SharedDtor();
}

void QueryFriendListResult::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void QueryFriendListResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryFriendListResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryFriendListResult_descriptor_;
}

const QueryFriendListResult& QueryFriendListResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueryServer_2eproto();  return *default_instance_;
}

QueryFriendListResult* QueryFriendListResult::default_instance_ = NULL;

QueryFriendListResult* QueryFriendListResult::New() const {
  return new QueryFriendListResult;
}

void QueryFriendListResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    retcode_ = 0;
    leftcount_ = 0;
  }
  friendid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryFriendListResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retCode;
        break;
      }
      
      // required .lhchat.OperateResultCode retCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retCode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lhchat::OperateResultCode_IsValid(value)) {
            set_retcode(static_cast< lhchat::OperateResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leftCount;
        break;
      }
      
      // required int32 leftCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftcount_)));
          set_has_leftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_friendId;
        break;
      }
      
      // repeated int32 friendId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_friendid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_friendid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_friendId;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryFriendListResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->message(), output);
  }
  
  // required .lhchat.OperateResultCode retCode = 2;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->retcode(), output);
  }
  
  // required int32 leftCount = 3;
  if (has_leftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leftcount(), output);
  }
  
  // repeated int32 friendId = 4;
  for (int i = 0; i < this->friendid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->friendid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryFriendListResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes message = 1;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->message(), target);
  }
  
  // required .lhchat.OperateResultCode retCode = 2;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->retcode(), target);
  }
  
  // required int32 leftCount = 3;
  if (has_leftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leftcount(), target);
  }
  
  // repeated int32 friendId = 4;
  for (int i = 0; i < this->friendid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->friendid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryFriendListResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }
    
    // required .lhchat.OperateResultCode retCode = 2;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }
    
    // required int32 leftCount = 3;
    if (has_leftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftcount());
    }
    
  }
  // repeated int32 friendId = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->friendid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->friendid(i));
    }
    total_size += 1 * this->friendid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryFriendListResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryFriendListResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryFriendListResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryFriendListResult::MergeFrom(const QueryFriendListResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendid_.MergeFrom(from.friendid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_leftcount()) {
      set_leftcount(from.leftcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryFriendListResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFriendListResult::CopyFrom(const QueryFriendListResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFriendListResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void QueryFriendListResult::Swap(QueryFriendListResult* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(retcode_, other->retcode_);
    std::swap(leftcount_, other->leftcount_);
    friendid_.Swap(&other->friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryFriendListResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryFriendListResult_descriptor_;
  metadata.reflection = QueryFriendListResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryFriendInfoResult::kMessageFieldNumber;
const int QueryFriendInfoResult::kRetCodeFieldNumber;
#endif  // !_MSC_VER

QueryFriendInfoResult::QueryFriendInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryFriendInfoResult::InitAsDefaultInstance() {
}

QueryFriendInfoResult::QueryFriendInfoResult(const QueryFriendInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryFriendInfoResult::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryFriendInfoResult::~QueryFriendInfoResult() {
  SharedDtor();
}

void QueryFriendInfoResult::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void QueryFriendInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryFriendInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryFriendInfoResult_descriptor_;
}

const QueryFriendInfoResult& QueryFriendInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueryServer_2eproto();  return *default_instance_;
}

QueryFriendInfoResult* QueryFriendInfoResult::default_instance_ = NULL;

QueryFriendInfoResult* QueryFriendInfoResult::New() const {
  return new QueryFriendInfoResult;
}

void QueryFriendInfoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryFriendInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retCode;
        break;
      }
      
      // required .lhchat.OperateResultCode retCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retCode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lhchat::OperateResultCode_IsValid(value)) {
            set_retcode(static_cast< lhchat::OperateResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryFriendInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->message(), output);
  }
  
  // required .lhchat.OperateResultCode retCode = 2;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->retcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryFriendInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes message = 1;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->message(), target);
  }
  
  // required .lhchat.OperateResultCode retCode = 2;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->retcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryFriendInfoResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }
    
    // required .lhchat.OperateResultCode retCode = 2;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryFriendInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryFriendInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryFriendInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryFriendInfoResult::MergeFrom(const QueryFriendInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryFriendInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFriendInfoResult::CopyFrom(const QueryFriendInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFriendInfoResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void QueryFriendInfoResult::Swap(QueryFriendInfoResult* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryFriendInfoResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryFriendInfoResult_descriptor_;
  metadata.reflection = QueryFriendInfoResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryFriendExtrasResult::kMessageFieldNumber;
const int QueryFriendExtrasResult::kRetCodeFieldNumber;
#endif  // !_MSC_VER

QueryFriendExtrasResult::QueryFriendExtrasResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryFriendExtrasResult::InitAsDefaultInstance() {
}

QueryFriendExtrasResult::QueryFriendExtrasResult(const QueryFriendExtrasResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryFriendExtrasResult::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryFriendExtrasResult::~QueryFriendExtrasResult() {
  SharedDtor();
}

void QueryFriendExtrasResult::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void QueryFriendExtrasResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryFriendExtrasResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryFriendExtrasResult_descriptor_;
}

const QueryFriendExtrasResult& QueryFriendExtrasResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueryServer_2eproto();  return *default_instance_;
}

QueryFriendExtrasResult* QueryFriendExtrasResult::default_instance_ = NULL;

QueryFriendExtrasResult* QueryFriendExtrasResult::New() const {
  return new QueryFriendExtrasResult;
}

void QueryFriendExtrasResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryFriendExtrasResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retCode;
        break;
      }
      
      // required .lhchat.OperateResultCode retCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retCode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lhchat::OperateResultCode_IsValid(value)) {
            set_retcode(static_cast< lhchat::OperateResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryFriendExtrasResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->message(), output);
  }
  
  // required .lhchat.OperateResultCode retCode = 2;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->retcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryFriendExtrasResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes message = 1;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->message(), target);
  }
  
  // required .lhchat.OperateResultCode retCode = 2;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->retcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryFriendExtrasResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }
    
    // required .lhchat.OperateResultCode retCode = 2;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryFriendExtrasResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryFriendExtrasResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryFriendExtrasResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryFriendExtrasResult::MergeFrom(const QueryFriendExtrasResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryFriendExtrasResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFriendExtrasResult::CopyFrom(const QueryFriendExtrasResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFriendExtrasResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void QueryFriendExtrasResult::Swap(QueryFriendExtrasResult* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryFriendExtrasResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryFriendExtrasResult_descriptor_;
  metadata.reflection = QueryFriendExtrasResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildAccessTokenResult::kChannelNameFieldNumber;
const int BuildAccessTokenResult::kChannelKindFieldNumber;
const int BuildAccessTokenResult::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

BuildAccessTokenResult::BuildAccessTokenResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildAccessTokenResult::InitAsDefaultInstance() {
}

BuildAccessTokenResult::BuildAccessTokenResult(const BuildAccessTokenResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildAccessTokenResult::SharedCtor() {
  _cached_size_ = 0;
  channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelkind_ = 0;
  accesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildAccessTokenResult::~BuildAccessTokenResult() {
  SharedDtor();
}

void BuildAccessTokenResult::SharedDtor() {
  if (channelname_ != &::google::protobuf::internal::kEmptyString) {
    delete channelname_;
  }
  if (accesstoken_ != &::google::protobuf::internal::kEmptyString) {
    delete accesstoken_;
  }
  if (this != default_instance_) {
  }
}

void BuildAccessTokenResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildAccessTokenResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildAccessTokenResult_descriptor_;
}

const BuildAccessTokenResult& BuildAccessTokenResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueryServer_2eproto();  return *default_instance_;
}

BuildAccessTokenResult* BuildAccessTokenResult::default_instance_ = NULL;

BuildAccessTokenResult* BuildAccessTokenResult::New() const {
  return new BuildAccessTokenResult;
}

void BuildAccessTokenResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channelname()) {
      if (channelname_ != &::google::protobuf::internal::kEmptyString) {
        channelname_->clear();
      }
    }
    channelkind_ = 0;
    if (has_accesstoken()) {
      if (accesstoken_ != &::google::protobuf::internal::kEmptyString) {
        accesstoken_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildAccessTokenResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes channelName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_channelname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channelKind;
        break;
      }
      
      // required .lhchat.ChannelKind channelKind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelKind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lhchat::ChannelKind_IsValid(value)) {
            set_channelkind(static_cast< lhchat::ChannelKind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AccessToken;
        break;
      }
      
      // optional bytes AccessToken = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AccessToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_accesstoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildAccessTokenResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes channelName = 1;
  if (has_channelname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->channelname(), output);
  }
  
  // required .lhchat.ChannelKind channelKind = 2;
  if (has_channelkind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->channelkind(), output);
  }
  
  // optional bytes AccessToken = 3;
  if (has_accesstoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->accesstoken(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildAccessTokenResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes channelName = 1;
  if (has_channelname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->channelname(), target);
  }
  
  // required .lhchat.ChannelKind channelKind = 2;
  if (has_channelkind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->channelkind(), target);
  }
  
  // optional bytes AccessToken = 3;
  if (has_accesstoken()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->accesstoken(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildAccessTokenResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes channelName = 1;
    if (has_channelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->channelname());
    }
    
    // required .lhchat.ChannelKind channelKind = 2;
    if (has_channelkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channelkind());
    }
    
    // optional bytes AccessToken = 3;
    if (has_accesstoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->accesstoken());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildAccessTokenResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildAccessTokenResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildAccessTokenResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildAccessTokenResult::MergeFrom(const BuildAccessTokenResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channelname()) {
      set_channelname(from.channelname());
    }
    if (from.has_channelkind()) {
      set_channelkind(from.channelkind());
    }
    if (from.has_accesstoken()) {
      set_accesstoken(from.accesstoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildAccessTokenResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildAccessTokenResult::CopyFrom(const BuildAccessTokenResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAccessTokenResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BuildAccessTokenResult::Swap(BuildAccessTokenResult* other) {
  if (other != this) {
    std::swap(channelname_, other->channelname_);
    std::swap(channelkind_, other->channelkind_);
    std::swap(accesstoken_, other->accesstoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildAccessTokenResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildAccessTokenResult_descriptor_;
  metadata.reflection = BuildAccessTokenResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lhchat

// @@protoc_insertion_point(global_scope)
