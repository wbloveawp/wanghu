// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION

#include "stdafx.h"
#include "Demo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)



namespace pbdemo {

namespace {

const ::google::protobuf::Descriptor* RequestPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* RespondePacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RespondePacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Demo_2eproto() {
  protobuf_AddDesc_Demo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Demo.proto");
  GOOGLE_CHECK(file != NULL);
  RequestPacket_descriptor_ = file->message_type(0);
  static const int RequestPacket_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPacket, val_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPacket, val_sint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPacket, val_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPacket, val_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPacket, val_bytes_),
  };
  RequestPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPacket_descriptor_,
      RequestPacket::default_instance_,
      RequestPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPacket));
  RespondePacket_descriptor_ = file->message_type(1);
  static const int RespondePacket_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondePacket, val_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondePacket, val_sint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondePacket, val_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondePacket, val_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondePacket, val_bytes_),
  };
  RespondePacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RespondePacket_descriptor_,
      RespondePacket::default_instance_,
      RespondePacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondePacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondePacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RespondePacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Demo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPacket_descriptor_, &RequestPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RespondePacket_descriptor_, &RespondePacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Demo_2eproto() {
  delete RequestPacket::default_instance_;
  delete RequestPacket_reflection_;
  delete RespondePacket::default_instance_;
  delete RespondePacket_reflection_;
}

void protobuf_AddDesc_Demo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nDemo.proto\022\006pbdemo\"p\n\rRequestPacket\022\021\n"
    "\tval_int32\030\001 \002(\005\022\022\n\nval_sint64\030\002 \001(\022\022\022\n\n"
    "val_double\030\003 \001(\001\022\021\n\tval_float\030\004 \001(\002\022\021\n\tv"
    "al_bytes\030\005 \001(\014\"q\n\016RespondePacket\022\021\n\tval_"
    "int32\030\001 \002(\005\022\022\n\nval_sint64\030\002 \001(\022\022\022\n\nval_d"
    "ouble\030\003 \001(\001\022\021\n\tval_float\030\004 \001(\002\022\021\n\tval_by"
    "tes\030\005 \001(\014", 249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Demo.proto", &protobuf_RegisterTypes);
  RequestPacket::default_instance_ = new RequestPacket();
  RespondePacket::default_instance_ = new RespondePacket();
  RequestPacket::default_instance_->InitAsDefaultInstance();
  RespondePacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Demo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Demo_2eproto {
  StaticDescriptorInitializer_Demo_2eproto() {
    protobuf_AddDesc_Demo_2eproto();
  }
} static_descriptor_initializer_Demo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RequestPacket::kValInt32FieldNumber;
const int RequestPacket::kValSint64FieldNumber;
const int RequestPacket::kValDoubleFieldNumber;
const int RequestPacket::kValFloatFieldNumber;
const int RequestPacket::kValBytesFieldNumber;
#endif  // !_MSC_VER

RequestPacket::RequestPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestPacket::InitAsDefaultInstance() {
}

RequestPacket::RequestPacket(const RequestPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestPacket::SharedCtor() {
  _cached_size_ = 0;
  val_int32_ = 0;
  val_sint64_ = GOOGLE_LONGLONG(0);
  val_double_ = 0;
  val_float_ = 0;
  val_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPacket::~RequestPacket() {
  SharedDtor();
}

void RequestPacket::SharedDtor() {
  if (val_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete val_bytes_;
  }
  if (this != default_instance_) {
  }
}

void RequestPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPacket_descriptor_;
}

const RequestPacket& RequestPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Demo_2eproto();  return *default_instance_;
}

RequestPacket* RequestPacket::default_instance_ = NULL;

RequestPacket* RequestPacket::New() const {
  return new RequestPacket;
}

void RequestPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    val_int32_ = 0;
    val_sint64_ = GOOGLE_LONGLONG(0);
    val_double_ = 0;
    val_float_ = 0;
    if (has_val_bytes()) {
      if (val_bytes_ != &::google::protobuf::internal::kEmptyString) {
        val_bytes_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 val_int32 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_int32_)));
          set_has_val_int32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val_sint64;
        break;
      }
      
      // optional sint64 val_sint64 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val_sint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &val_sint64_)));
          set_has_val_sint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_val_double;
        break;
      }
      
      // optional double val_double = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_val_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &val_double_)));
          set_has_val_double();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_val_float;
        break;
      }
      
      // optional float val_float = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_val_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_float_)));
          set_has_val_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_val_bytes;
        break;
      }
      
      // optional bytes val_bytes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_val_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 val_int32 = 1;
  if (has_val_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->val_int32(), output);
  }
  
  // optional sint64 val_sint64 = 2;
  if (has_val_sint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->val_sint64(), output);
  }
  
  // optional double val_double = 3;
  if (has_val_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->val_double(), output);
  }
  
  // optional float val_float = 4;
  if (has_val_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->val_float(), output);
  }
  
  // optional bytes val_bytes = 5;
  if (has_val_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->val_bytes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 val_int32 = 1;
  if (has_val_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->val_int32(), target);
  }
  
  // optional sint64 val_sint64 = 2;
  if (has_val_sint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->val_sint64(), target);
  }
  
  // optional double val_double = 3;
  if (has_val_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->val_double(), target);
  }
  
  // optional float val_float = 4;
  if (has_val_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->val_float(), target);
  }
  
  // optional bytes val_bytes = 5;
  if (has_val_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->val_bytes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestPacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 val_int32 = 1;
    if (has_val_int32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_int32());
    }
    
    // optional sint64 val_sint64 = 2;
    if (has_val_sint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->val_sint64());
    }
    
    // optional double val_double = 3;
    if (has_val_double()) {
      total_size += 1 + 8;
    }
    
    // optional float val_float = 4;
    if (has_val_float()) {
      total_size += 1 + 4;
    }
    
    // optional bytes val_bytes = 5;
    if (has_val_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->val_bytes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPacket::MergeFrom(const RequestPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_val_int32()) {
      set_val_int32(from.val_int32());
    }
    if (from.has_val_sint64()) {
      set_val_sint64(from.val_sint64());
    }
    if (from.has_val_double()) {
      set_val_double(from.val_double());
    }
    if (from.has_val_float()) {
      set_val_float(from.val_float());
    }
    if (from.has_val_bytes()) {
      set_val_bytes(from.val_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPacket::CopyFrom(const RequestPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestPacket::Swap(RequestPacket* other) {
  if (other != this) {
    std::swap(val_int32_, other->val_int32_);
    std::swap(val_sint64_, other->val_sint64_);
    std::swap(val_double_, other->val_double_);
    std::swap(val_float_, other->val_float_);
    std::swap(val_bytes_, other->val_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPacket_descriptor_;
  metadata.reflection = RequestPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RespondePacket::kValInt32FieldNumber;
const int RespondePacket::kValSint64FieldNumber;
const int RespondePacket::kValDoubleFieldNumber;
const int RespondePacket::kValFloatFieldNumber;
const int RespondePacket::kValBytesFieldNumber;
#endif  // !_MSC_VER

RespondePacket::RespondePacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RespondePacket::InitAsDefaultInstance() {
}

RespondePacket::RespondePacket(const RespondePacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RespondePacket::SharedCtor() {
  _cached_size_ = 0;
  val_int32_ = 0;
  val_sint64_ = GOOGLE_LONGLONG(0);
  val_double_ = 0;
  val_float_ = 0;
  val_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RespondePacket::~RespondePacket() {
  SharedDtor();
}

void RespondePacket::SharedDtor() {
  if (val_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete val_bytes_;
  }
  if (this != default_instance_) {
  }
}

void RespondePacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespondePacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespondePacket_descriptor_;
}

const RespondePacket& RespondePacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Demo_2eproto();  return *default_instance_;
}

RespondePacket* RespondePacket::default_instance_ = NULL;

RespondePacket* RespondePacket::New() const {
  return new RespondePacket;
}

void RespondePacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    val_int32_ = 0;
    val_sint64_ = GOOGLE_LONGLONG(0);
    val_double_ = 0;
    val_float_ = 0;
    if (has_val_bytes()) {
      if (val_bytes_ != &::google::protobuf::internal::kEmptyString) {
        val_bytes_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RespondePacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 val_int32 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_int32_)));
          set_has_val_int32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val_sint64;
        break;
      }
      
      // optional sint64 val_sint64 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val_sint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &val_sint64_)));
          set_has_val_sint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_val_double;
        break;
      }
      
      // optional double val_double = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_val_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &val_double_)));
          set_has_val_double();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_val_float;
        break;
      }
      
      // optional float val_float = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_val_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_float_)));
          set_has_val_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_val_bytes;
        break;
      }
      
      // optional bytes val_bytes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_val_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RespondePacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 val_int32 = 1;
  if (has_val_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->val_int32(), output);
  }
  
  // optional sint64 val_sint64 = 2;
  if (has_val_sint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->val_sint64(), output);
  }
  
  // optional double val_double = 3;
  if (has_val_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->val_double(), output);
  }
  
  // optional float val_float = 4;
  if (has_val_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->val_float(), output);
  }
  
  // optional bytes val_bytes = 5;
  if (has_val_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->val_bytes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RespondePacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 val_int32 = 1;
  if (has_val_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->val_int32(), target);
  }
  
  // optional sint64 val_sint64 = 2;
  if (has_val_sint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->val_sint64(), target);
  }
  
  // optional double val_double = 3;
  if (has_val_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->val_double(), target);
  }
  
  // optional float val_float = 4;
  if (has_val_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->val_float(), target);
  }
  
  // optional bytes val_bytes = 5;
  if (has_val_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->val_bytes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RespondePacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 val_int32 = 1;
    if (has_val_int32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_int32());
    }
    
    // optional sint64 val_sint64 = 2;
    if (has_val_sint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->val_sint64());
    }
    
    // optional double val_double = 3;
    if (has_val_double()) {
      total_size += 1 + 8;
    }
    
    // optional float val_float = 4;
    if (has_val_float()) {
      total_size += 1 + 4;
    }
    
    // optional bytes val_bytes = 5;
    if (has_val_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->val_bytes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespondePacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RespondePacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RespondePacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RespondePacket::MergeFrom(const RespondePacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_val_int32()) {
      set_val_int32(from.val_int32());
    }
    if (from.has_val_sint64()) {
      set_val_sint64(from.val_sint64());
    }
    if (from.has_val_double()) {
      set_val_double(from.val_double());
    }
    if (from.has_val_float()) {
      set_val_float(from.val_float());
    }
    if (from.has_val_bytes()) {
      set_val_bytes(from.val_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RespondePacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespondePacket::CopyFrom(const RespondePacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespondePacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RespondePacket::Swap(RespondePacket* other) {
  if (other != this) {
    std::swap(val_int32_, other->val_int32_);
    std::swap(val_sint64_, other->val_sint64_);
    std::swap(val_double_, other->val_double_);
    std::swap(val_float_, other->val_float_);
    std::swap(val_bytes_, other->val_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RespondePacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RespondePacket_descriptor_;
  metadata.reflection = RespondePacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbdemo

// @@protoc_insertion_point(global_scope)
