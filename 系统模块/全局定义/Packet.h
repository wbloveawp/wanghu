#ifndef PACKET_HEAD_FILE
#define PACKET_HEAD_FILE

#pragma pack(1)

//////////////////////////////////////////////////////////////////////////
//端口定义

#define MAX_CONTENT					2046								//并发容量
#define PORT_AUTO_SELECT			INVALID_WORD						//自动端口
#define PORT_AUTO_MIN				10000								//最小端口
#define PORT_AUTO_MAX				30000								//最大端口


#define PORT_LOGON					6000								//登陆端口
#define PORT_CENTER					6010								//中心端口
#define PORT_MANAGER				6030								//管理端口
#define PORT_VALIDATE				6020								//验证端口

//////////////////////////////////////////////////////////////////////////
//网络定义

//网络掩码
#define DATA_MASK_CRYPTED			0x01								//数据加密
#define DATA_MASK_TAKETOKEN			0x10								//携带令牌

//网络令牌
#define TOKEN_COUNT					200									//网络令牌
#define TOKEN_BUFFER				(TOKEN_COUNT*sizeof(DWORD))			//令牌缓冲	

//缓冲定义
#define SOCKET_BUFFER				16384								//网络缓冲
#define SOCKET_PACKET				(SOCKET_BUFFER-TOKEN_BUFFER-sizeof(CMD_Head)-3*sizeof(DWORD)-39)

//网络内核
struct CMD_Info
{
	BYTE							cbDataMask;							//数据掩码
	BYTE							cbCheckCode;						//效验字段
	WORD							wPacketSize;						//数据大小
};

//网络命令
struct CMD_Command
{
	WORD							wMainCmdID;							//主命令码
	WORD							wSubCmdID;							//子命令码
};

//网络包头
struct CMD_Head
{
	CMD_Info						CmdInfo;							//基础结构
	CMD_Command						CommandInfo;						//命令信息
};

//网络包缓冲
struct CMD_Buffer
{
	CMD_Head						Head;								//数据包头
	BYTE							cbBuffer[SOCKET_PACKET];			//数据缓冲
};

//////////////////////////////////////////////////////////////////////////

//内核命令
#define MDM_KN_COMMAND				0									//内核命令
#define SUB_KN_DETECT_SOCKET		1									//检测命令
#define SUB_KN_SHUT_DOWN_SOCKET		2									//中断连接
#define SUB_KN_REPORT_ADDRESS		3									//上报地址

//////////////////////////////////////////////////////////////////////////
//传输数据

#define IPC_VER						1									//版本标识
#define IPC_PACKET					(SOCKET_BUFFER-sizeof(IPC_Head))	//最大包长
#define IPC_BUFFER					(sizeof(IPC_Head)+IPC_PACKET)		//缓冲长度

//数据包头
struct IPC_Head
{
	WORD							wVersion;							//版本标识
	WORD							wPacketSize;						//数据大小
	WORD							wMainCmdID;							//主命令码
	WORD							wSubCmdID;							//子命令码
};

//IPC 包结构
struct IPC_Buffer
{
	IPC_Head						Head;								//数据包头
	BYTE							cbBuffer[IPC_PACKET];				//数据缓冲
};

//////////////////////////////////////////////////////////////////////////
//数据定义

//加密密钥
const DWORD g_dwPacketKey[] = { 0x03108F80,0x0108DBC0,0x02F64EDC,0x02236421,0x015433E0 };

//发送映射
const BYTE g_SendByteMap[256] =
{
	0x3A,0x41,0x44,0xD2,0xE8,0xD0,0xA7,0xB8,0x01,0x9D,0x28,0xD3,0xFB,0x1B,0x8A,0x40,
	0xA6,0x33,0xA1,0x3F,0x69,0x81,0x38,0xE0,0xA8,0x00,0x57,0x47,0x95,0xCE,0x5D,0x50,
	0x4A,0x83,0xB2,0x0B,0xD4,0x9F,0xB4,0x9A,0xC2,0xEB,0x73,0x15,0x2C,0x56,0x04,0x06,
	0x0F,0xE6,0xA5,0x7B,0x70,0xC7,0xA0,0xC0,0x8E,0xBA,0x8F,0x9C,0x6D,0x22,0x6E,0xBC,
	0xEF,0x10,0xC1,0x7E,0x88,0xAB,0xD8,0x85,0x87,0x60,0xAC,0xC5,0x53,0xF8,0x59,0x14,
	0xE4,0x26,0x49,0x12,0xF5,0x90,0xDE,0x0D,0xFC,0x35,0xF1,0xA4,0x71,0x4C,0x25,0xB7,
	0x58,0xF9,0x75,0xCC,0x0E,0x43,0x79,0x62,0x99,0xCA,0x6F,0x77,0x05,0x48,0xBE,0xDA,
	0xB3,0x34,0x54,0x55,0x98,0xF3,0x32,0x51,0x8D,0x19,0x24,0x42,0x29,0x21,0x86,0xFE,
	0xFA,0xD9,0xAD,0x08,0x7D,0x9B,0xB9,0xBB,0x64,0xCD,0x78,0xA2,0x76,0x4B,0x72,0xBF,
	0x67,0x2B,0xFD,0xD5,0x68,0x39,0x5E,0x8C,0x7A,0xE3,0x94,0xDC,0xB1,0xB5,0x52,0x20,
	0x17,0x46,0xEC,0x1A,0x1E,0x3D,0x37,0xB0,0x5F,0x65,0xA9,0x6C,0xEA,0x5A,0x74,0x7F,
	0x0C,0x3C,0x96,0xE1,0xD6,0xB6,0x93,0x63,0x4F,0x23,0xC9,0x5B,0x6B,0xD7,0x3E,0xDF,
	0x92,0xC8,0x8B,0x36,0x1F,0xE5,0x0A,0x84,0x07,0xF7,0xF4,0xEE,0x6A,0xC4,0xE9,0x02,
	0xF2,0x4D,0xC3,0x13,0x11,0x97,0x1C,0xF0,0x91,0x89,0x3B,0x1D,0xAE,0x9E,0x2E,0xD1,
	0xA3,0xAF,0xE2,0x09,0xED,0xBD,0x82,0x18,0xDD,0x03,0xFF,0xDB,0x7C,0x45,0x5C,0x61,
	0xF6,0xC6,0x31,0x30,0x4E,0x27,0x2A,0x2D,0xE7,0xAA,0xCB,0xCF,0x2F,0x80,0x66,0x16
};

//接收映射
const BYTE g_RecvByteMap[256] =
{
	0x19,0x08,0xCF,0xE9,0x2E,0x6C,0x2F,0xC8,0x83,0xE3,0xC6,0x23,0xB0,0x57,0x64,0x30,
	0x41,0xD4,0x53,0xD3,0x4F,0x2B,0xFF,0xA0,0xE7,0x79,0xA3,0x0D,0xD6,0xDB,0xA4,0xC4,
	0x9F,0x7D,0x3D,0xB9,0x7A,0x5E,0x51,0xF5,0x0A,0x7C,0xF6,0x91,0x2C,0xF7,0xDE,0xFC,
	0xF3,0xF2,0x76,0x11,0x71,0x59,0xC3,0xA6,0x16,0x95,0x00,0xDA,0xB1,0xA5,0xBE,0x13,
	0x0F,0x01,0x7B,0x65,0x02,0xED,0xA1,0x1B,0x6D,0x52,0x20,0x8D,0x5D,0xD1,0xF4,0xB8,
	0x1F,0x77,0x9E,0x4C,0x72,0x73,0x2D,0x1A,0x60,0x4E,0xAD,0xBB,0xEE,0x1E,0x96,0xA8,
	0x49,0xEF,0x67,0xB7,0x88,0xA9,0xFE,0x90,0x94,0x14,0xCC,0xBC,0xAB,0x3C,0x3E,0x6A,
	0x34,0x5C,0x8E,0x2A,0xAE,0x62,0x8C,0x6B,0x8A,0x66,0x98,0x33,0xEC,0x84,0x43,0xAF,
	0xFD,0x15,0xE6,0x21,0xC7,0x47,0x7E,0x48,0x44,0xD9,0x0E,0xC2,0x97,0x78,0x38,0x3A,
	0x55,0xD8,0xC0,0xB6,0x9A,0x1C,0xB2,0xD5,0x74,0x68,0x27,0x85,0x3B,0x09,0xDD,0x25,
	0x36,0x12,0x8B,0xE0,0x5B,0x32,0x10,0x06,0x18,0xAA,0xF9,0x45,0x4A,0x82,0xDC,0xE1,
	0xA7,0x9C,0x22,0x70,0x26,0x9D,0xB5,0x5F,0x07,0x86,0x39,0x87,0x3F,0xE5,0x6E,0x8F,
	0x37,0x42,0x28,0xD2,0xCD,0x4B,0xF1,0x35,0xC1,0xBA,0x69,0xFA,0x63,0x89,0x1D,0xFB,
	0x05,0xDF,0x03,0x0B,0x24,0x93,0xB4,0xBD,0x46,0x81,0x6F,0xEB,0x9B,0xE8,0x56,0xBF,
	0x17,0xB3,0xE2,0x99,0x50,0xC5,0x31,0xF8,0x04,0xCE,0xAC,0x29,0xA2,0xE4,0xCB,0x40,
	0xD7,0x5A,0xD0,0x75,0xCA,0x54,0xF0,0xC9,0x4D,0x61,0x80,0x0C,0x58,0x92,0x7F,0xEA
};


//////////////////////////////////////////////////////////////////////////

#pragma pack()

#endif